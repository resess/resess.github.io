<android.widget.EditText: android.text.Editable getText()> -> _SOURCE_
<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: cz.msebera.android.httpclient.HttpResponse execute(cz.msebera.android.httpclient.HttpHost,cz.msebera.android.httpclient.HttpRequest)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: cz.msebera.android.httpclient.HttpResponse execute(cz.msebera.android.httpclient.HttpHost,cz.msebera.android.httpclient.HttpRequest,cz.msebera.android.httpclient.protocol.HttpContext)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: cz.msebera.android.httpclient.HttpResponse execute(cz.msebera.android.httpclient.client.methods.HttpUriRequest)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: cz.msebera.android.httpclient.HttpResponse execute(cz.msebera.android.httpclient.client.methods.HttpUriRequest,cz.msebera.android.httpclient.protocol.HttpContext)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: java.lang.Object execute(cz.msebera.android.httpclient.HttpHost,cz.msebera.android.httpclient.HttpRequest,cz.msebera.android.httpclient.client.ResponseHandler)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: java.lang.Object execute(cz.msebera.android.httpclient.HttpHost,cz.msebera.android.httpclient.HttpRequest,cz.msebera.android.httpclient.client.ResponseHandler,cz.msebera.android.httpclient.protocol.HttpContext)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: java.lang.Object execute(cz.msebera.android.httpclient.client.methods.HttpUriRequest,cz.msebera.android.httpclient.client.ResponseHandler)> -> _SINK_
<cz.msebera.android.httpclient.client.HttpClient: java.lang.Object execute(cz.msebera.android.httpclient.client.methods.HttpUriRequest,cz.msebera.android.httpclient.client.ResponseHandler,cz.msebera.android.httpclient.protocol.HttpContext)> -> _SINK_
<okhttp3.Call: void enqueue(okhttp3.Callback)> -> _SINK_
<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<retrofit2.Call: retrofit2.Response execute()> -> _SINK_
<rx.Observable: rx.Subscription subscribe(rx.Observer)> -> _SINK_
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)> -> _SINK_
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[],int,int)> -> _SINK_
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(int)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String)> -> _SINK_
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadio(int,boolean)> -> _SINK_
<android.net.ConnectivityManager: boolean setRadios(boolean)> -> _SINK_
<android.net.ConnectivityManager: int setUsbTethering(boolean)> -> _SINK_
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: void setBackgroundDataSetting(boolean)> -> _SINK_
<android.net.ConnectivityManager: void setDataDependency(int,boolean)> -> _SINK_
<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)> -> _SINK_
<android.net.ConnectivityManager: void setNetworkPreference(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean prepareVpn(java.lang.String,java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHost(int,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean requestRouteToHostAddress(int,byte[])> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadio(int,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: boolean setRadios(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int setUsbTethering(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int stopUsingNetworkFeature(int,java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int tether(java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: int untether(java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void reportInetCondition(int,int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void requestNetworkTransitionWakelock(java.lang.String)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setDataDependency(int,boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setGlobalProxy(android.net.ProxyProperties)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setMobileDataEnabled(boolean)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setNetworkPreference(int)> -> _SINK_
<android.net.IConnectivityManager$Stub$Proxy: void setPolicyDataEnable(int,boolean)> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onMeteredIfacesChanged(java.lang.String[])> -> _SINK_
<android.net.INetworkPolicyListener$Stub$Proxy: void onUidRulesChanged(int,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void registerListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setRestrictBackground(boolean)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void setUidPolicy(int,int)> -> _SINK_
<android.net.INetworkPolicyManager$Stub$Proxy: void unregisterListener(android.net.INetworkPolicyListener)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void incrementOperationCount(int,int,int)> -> _SINK_
<android.net.INetworkStatsService$Stub$Proxy: void setUidForeground(int,boolean)> -> _SINK_
<android.net.LinkCapabilities: void put(int,java.lang.String)> -> _SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.net.LocalSocket: void setSendBufferSize(int)> -> _SINK_
<android.net.LocalSocket: void setSoTimeout(int)> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[],int,int)> -> _SINK_
<android.net.LocalSocketImpl$SocketOutputStream: void write(int)> -> _SINK_
<android.net.NetworkPolicy: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.NetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])> -> _SINK_
<android.net.NetworkPolicyManager: void setUidPolicy(int,int)> -> _SINK_
<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)> -> _SINK_
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)> -> _SINK_
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)> -> _SINK_
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsUid(int)> -> _SINK_
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)> -> _SINK_
<android.net.http.Headers: void setAcceptRanges(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setCacheControl(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentDisposition(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentEncoding(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setContentType(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setEtag(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setExpires(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setLastModified(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setLocation(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setProxyAuthenticate(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setWwwAuthenticate(java.lang.String)> -> _SINK_
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)> -> _SINK_
<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)> -> _SINK_
<android.net.http.RequestHandle: boolean setupRedirect(java.lang.String,int,java.util.Map)> -> _SINK_
<android.net.http.RequestHandle: void setupBasicAuthResponse(boolean,java.lang.String,java.lang.String)> -> _SINK_
<android.net.http.RequestHandle: void setupDigestAuthResponse(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)> -> _SINK_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> -> _SINK_
<android.net.rtp.AudioGroup: void sendDtmf(int)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: boolean isRegistered(java.lang.String)> -> _SINK_
<android.net.sip.ISipService$Stub$Proxy: void close(java.lang.String)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void answerCall(java.lang.String,int)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void changeCall(java.lang.String,int)> -> _SINK_
<android.net.sip.ISipSession$Stub$Proxy: void register(int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAddress(java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Fields: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAddress(java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAddress(java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setBandwidth(java.lang.String,int)> -> _SINK_
<android.net.sip.SimpleSessionDescription: void setEncryption(java.lang.String,java.lang.String)> -> _SINK_
<android.net.sip.SipAudioCall: void sendDtmf(int)> -> _SINK_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> -> _SINK_
<android.net.sip.SipManager: android.content.Intent createIncomingCallBroadcast(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean disableNetwork(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean enableNetwork(int,boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean releaseWifiLock(android.os.IBinder)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean removeNetwork(int)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: boolean setWifiEnabled(boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void acquireMulticastLock(android.os.IBinder,java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void addToBlacklist(java.lang.String)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.IWifiManager$Stub$Proxy: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)> -> _SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void setCountryCode(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.WifiManager: void setFrequencyBand(int,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.opengl.GLSurfaceView$LogWriter: void write(char[],int,int)> -> _SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)> -> _SINK_
<android.os.MemoryFile$MemoryOutputStream: void write(int)> -> _SINK_
<android.support.v4.util.LogWriter: void write(char[],int,int)> -> _SINK_
<android.util.Base64OutputStream: void write(byte[],int,int)> -> _SINK_
<android.util.Base64OutputStream: void write(int)> -> _SINK_
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)> -> _SINK_
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.webkit.WebView: void loadUrl(java.lang.String)> -> _SINK_
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> -> _SINK_
<com.android.internal.os.LoggingPrintStream$1: void write(int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(boolean)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(char)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(char[])> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(double)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(float)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.Object)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(java.lang.String)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void print(long)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println()> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(boolean)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(char)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(char[])> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(double)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(float)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.Object)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(java.lang.String)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void println(long)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[])> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(byte[],int,int)> -> _SINK_
<com.android.internal.os.LoggingPrintStream: void write(int)> -> _SINK_
<droidsafe.concrete.DroidSafeFileOutputStream: void write(int)> -> _SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.BufferedOutputStream: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(int)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<java.io.CharArrayWriter: java.io.Writer append(char)> -> _SINK_
<java.io.CharArrayWriter: java.lang.Appendable append(char)> -> _SINK_
<java.io.CharArrayWriter: void write(char[],int,int)> -> _SINK_
<java.io.CharArrayWriter: void write(int)> -> _SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,boolean)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,byte)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,char)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,double)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,float)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,int)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,java.lang.Object)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,long)> -> _SINK_
<java.io.EmulatedFieldsForDumping: void put(java.lang.String,short)> -> _SINK_
<java.io.File: boolean setExecutable(boolean)> -> _SINK_
<java.io.File: boolean setExecutable(boolean,boolean)> -> _SINK_
<java.io.File: boolean setReadable(boolean)> -> _SINK_
<java.io.File: boolean setReadable(boolean,boolean)> -> _SINK_
<java.io.File: boolean setWritable(boolean)> -> _SINK_
<java.io.File: boolean setWritable(boolean,boolean)> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(char[],int,int)> -> _SINK_
<java.io.FilterWriter: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String)> -> _SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.PipedOutputStream: void write(int)> -> _SINK_
<java.io.PipedWriter: void write(char[],int,int)> -> _SINK_
<java.io.PipedWriter: void write(int)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(char)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.PrintStream: java.lang.Appendable append(char)> -> _SINK_
<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: void print(boolean)> -> _SINK_
<java.io.PrintStream: void print(char)> -> _SINK_
<java.io.PrintStream: void print(char[])> -> _SINK_
<java.io.PrintStream: void print(double)> -> _SINK_
<java.io.PrintStream: void print(float)> -> _SINK_
<java.io.PrintStream: void print(int)> -> _SINK_
<java.io.PrintStream: void print(java.lang.Object)> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SINK_
<java.io.PrintStream: void print(long)> -> _SINK_
<java.io.PrintStream: void println()> -> _SINK_
<java.io.PrintStream: void println(boolean)> -> _SINK_
<java.io.PrintStream: void println(char)> -> _SINK_
<java.io.PrintStream: void println(char[])> -> _SINK_
<java.io.PrintStream: void println(double)> -> _SINK_
<java.io.PrintStream: void println(float)> -> _SINK_
<java.io.PrintStream: void println(int)> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(long)> -> _SINK_
<java.io.PrintStream: void write(byte[],int,int)> -> _SINK_
<java.io.PrintStream: void write(int)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(char)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintWriter: java.io.Writer append(char)> -> _SINK_
<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintWriter: java.lang.Appendable append(char)> -> _SINK_
<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintWriter: void print(boolean)> -> _SINK_
<java.io.PrintWriter: void print(char)> -> _SINK_
<java.io.PrintWriter: void print(char[])> -> _SINK_
<java.io.PrintWriter: void print(double)> -> _SINK_
<java.io.PrintWriter: void print(float)> -> _SINK_
<java.io.PrintWriter: void print(int)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.Object)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void print(long)> -> _SINK_
<java.io.PrintWriter: void println()> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<java.io.PrintWriter: void println(char)> -> _SINK_
<java.io.PrintWriter: void println(char[])> -> _SINK_
<java.io.PrintWriter: void println(double)> -> _SINK_
<java.io.PrintWriter: void println(float)> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.Object)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(long)> -> _SINK_
<java.io.PrintWriter: void write(char[])> -> _SINK_
<java.io.PrintWriter: void write(char[],int,int)> -> _SINK_
<java.io.PrintWriter: void write(int)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBoolean(boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeByte(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<java.io.RandomAccessFile: void writeShort(int)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.StringWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.StringWriter: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.Writer: java.lang.Appendable append(char)> -> _SINK_
<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)> -> _SINK_
<java.lang.Throwable: void printStackTrace(java.lang.Appendable,java.lang.String,java.lang.StackTraceElement[])> -> _SINK_
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)> -> _SINK_
<java.net.DatagramPacket: void setLength(int)> -> _SINK_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocket: void setBroadcast(boolean)> -> _SINK_
<java.net.DatagramSocket: void setSoTimeout(int)> -> _SINK_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)> -> _SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(byte[],int,int)> -> _SINK_
<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)> -> _SINK_
<java.net.URLConnection: void setReadTimeout(int)> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)> -> _SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)> -> _SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.PipeImpl$PipeSinkChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(byte[],int,int)> -> _SINK_
<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(int)> -> _SINK_
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)> -> _SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(byte[],int,int)> -> _SINK_
<java.nio.channels.Channels$ChannelOutputStream: void write(int)> -> _SINK_
<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)> -> _SINK_
<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])> -> _SINK_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.security.DigestOutputStream: void write(byte[],int,int)> -> _SINK_
<java.security.DigestOutputStream: void write(int)> -> _SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(byte[],int,int)> -> _SINK_
<java.util.jar.JarVerifier$VerifierEntry: void write(int)> -> _SINK_
<java.util.logging.FileHandler$MeasureOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.logging.FileHandler$MeasureOutputStream: void write(int)> -> _SINK_
<java.util.zip.CheckedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.CheckedOutputStream: void write(int)> -> _SINK_
<java.util.zip.Deflater: void setInput(byte[])> -> _SINK_
<java.util.zip.Deflater: void setInput(byte[],int,int)> -> _SINK_
<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.DeflaterOutputStream: void write(int)> -> _SINK_
<java.util.zip.GZIPOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.GZIPOutputStream: void write(byte[])> -> _SINK_
<java.util.zip.Inflater: void setInput(byte[])> -> _SINK_
<java.util.zip.InflaterOutputStream: void write()> -> _SINK_
<java.util.zip.InflaterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.util.zip.InflaterOutputStream: void write(int)> -> _SINK_
<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)> -> _SINK_
<java.util.zip.ZipOutputStream: void write(byte[],int,int)> -> _SINK_
<javax.crypto.CipherOutputStream: void write(byte[],int,int)> -> _SINK_
<javax.crypto.CipherOutputStream: void write(int)> -> _SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.io.DiskLruCache$Editor$FaultHidingOutputStream: void write(int)> -> _SINK_
<libcore.io.ForwardingOs: void setegid(int)> -> _SINK_
<libcore.io.ForwardingOs: void seteuid(int)> -> _SINK_
<libcore.io.ForwardingOs: void setgid(int)> -> _SINK_
<libcore.io.ForwardingOs: void setuid(int)> -> _SINK_
<libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)> -> _SINK_
<libcore.io.Streams: int copy(java.io.InputStream,java.io.OutputStream)> -> _SINK_
<libcore.io.Streams: java.lang.String readFully(java.io.Reader)> -> _SINK_
<libcore.net.http.AbstractHttpOutputStream: void write(int)> -> _SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.HttpURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)> -> _SINK_
<libcore.net.http.HttpsURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.codec.binary.Base64OutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(byte[],java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(byte[],java.io.Writer,java.nio.charset.Charset)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(char[],java.io.OutputStream,java.nio.charset.Charset)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(char[],java.io.Writer)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream,java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.OutputStream,java.nio.charset.Charset)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.CharSequence,java.io.Writer)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.OutputStream,java.nio.charset.Charset)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.String,java.io.Writer)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: void write(java.lang.StringBuffer,java.io.Writer)> -> _SINK_
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String)> -> _SINK_
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.nio.charset.Charset)> -> _SINK_
<org.apache.commons.io.IOUtils: void writeLines(java.util.Collection,java.lang.String,java.io.Writer)> -> _SINK_
<org.apache.commons.io.output.BrokenOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.ByteArrayOutputStream: int write(java.io.InputStream)> -> _SINK_
<org.apache.commons.io.output.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.io.output.ByteArrayOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.commons.io.output.ClosedOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.FileWriterWithEncoding: void write(char[])> -> _SINK_
<org.apache.commons.io.output.FileWriterWithEncoding: void write(char[],int,int)> -> _SINK_
<org.apache.commons.io.output.FileWriterWithEncoding: void write(int)> -> _SINK_
<org.apache.commons.io.output.LockableFileWriter: void write(char[])> -> _SINK_
<org.apache.commons.io.output.NullOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.io.output.NullOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.io.output.NullOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.NullWriter: java.io.Writer append(char)> -> _SINK_
<org.apache.commons.io.output.NullWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<org.apache.commons.io.output.NullWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<org.apache.commons.io.output.NullWriter: java.lang.Appendable append(char)> -> _SINK_
<org.apache.commons.io.output.NullWriter: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<org.apache.commons.io.output.NullWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<org.apache.commons.io.output.NullWriter: void write(char[])> -> _SINK_
<org.apache.commons.io.output.NullWriter: void write(char[],int,int)> -> _SINK_
<org.apache.commons.io.output.NullWriter: void write(int)> -> _SINK_
<org.apache.commons.io.output.NullWriter: void write(java.lang.String)> -> _SINK_
<org.apache.commons.io.output.NullWriter: void write(java.lang.String,int,int)> -> _SINK_
<org.apache.commons.io.output.ProxyOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.io.output.ProxyOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.io.output.ProxyOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: java.io.Writer append(char)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: java.lang.Appendable append(char)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: void write(char[])> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: void write(char[],int,int)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: void write(int)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String)> -> _SINK_
<org.apache.commons.io.output.ProxyWriter: void write(java.lang.String,int,int)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: java.io.Writer append(char)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: java.lang.Appendable append(char)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: java.lang.Appendable append(java.lang.CharSequence)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: void write(char[],int,int)> -> _SINK_
<org.apache.commons.io.output.StringBuilderWriter: void write(java.lang.String)> -> _SINK_
<org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.io.output.ThresholdingOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.io.output.ThresholdingOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.WriterOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.io.output.WriterOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.io.output.WriterOutputStream: void write(int)> -> _SINK_
<org.apache.commons.io.output.XmlStreamWriter: void write(char[],int,int)> -> _SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[])> -> _SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(char[],int,int)> -> _SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(int)> -> _SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String)> -> _SINK_
<org.apache.commons.net.io.DotTerminatedMessageWriter: void write(java.lang.String,int,int)> -> _SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.net.io.FromNetASCIIOutputStream: void write(int)> -> _SINK_
<org.apache.commons.net.io.SocketOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.net.io.ToNetASCIIOutputStream: void write(int)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int data()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int expn(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int getReply()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int helo(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int help()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int help(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int mail(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int noop()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int quit()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int rcpt(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int rset()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int saml(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int send(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(int)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(int,java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int sendCommand(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int soml(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int turn()> -> _SINK_
<org.apache.commons.net.smtp.SMTP: int vrfy(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTP: java.lang.String[] getReplyStrings()> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean login()> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean login(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean reset()> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendNoOp()> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendShortMessageData(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendSimpleMessage(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean sendSimpleMessage(java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: boolean verify(java.lang.String)> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: java.io.Writer sendMessageData()> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: java.lang.String listHelp()> -> _SINK_
<org.apache.commons.net.smtp.SMTPClient: java.lang.String listHelp(java.lang.String)> -> _SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[])> -> _SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.commons.net.telnet.TelnetOutputStream: void write(int)> -> _SINK_
<org.apache.harmony.javax.security.auth.Subject$SecureSet: void writeObject(java.io.ObjectOutputStream)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[],int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setSoTimeout(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTcpNoDelay(boolean)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoTimeout(int)> -> _SINK_
<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTcpNoDelay(boolean)> -> _SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<org.apache.http.client.HttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.client.methods.HttpEntityEnclosingRequestBase: void setEntity(org.apache.http.HttpEntity)> -> _SINK_
<org.apache.http.client.methods.HttpGet: void setURI(java.net.URI)> -> _SINK_
<org.apache.http.client.methods.HttpPost: void setURI(java.net.URI)> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)> -> _SINK_
<org.apache.http.entity.AbstractHttpEntity: void setContentType(org.apache.http.Header)> -> _SINK_
<org.apache.http.entity.StringEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void setEntity(org.apache.http.HttpEntity)> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(int)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void addHeader(java.lang.String,java.lang.String)> -> _SINK_
<org.apache.http.message.AbstractHttpMessage: void addHeader(org.apache.http.Header)> -> _SINK_
<org.apache.http.message.BasicHttpEntityEnclosingRequest: void setEntity(org.apache.http.HttpEntity)> -> _SINK_
<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<org.apache.http.params.DefaultedHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)> -> _SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[])> -> _SINK_
<org.bouncycastle.asn1.DEROutputStream: void write(byte[],int,int)> -> _SINK_