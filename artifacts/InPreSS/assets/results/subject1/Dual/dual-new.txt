org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@153--->return;
com.thoughtworks.xstream.io.path.PathTrackingReader:moveDown: LineNo@39--->}
org.codehaus.jettison.Node:<init>: LineNo@67--->}
org.codehaus.jettison.util.FastStack:push: LineNo@24--->}
com.thoughtworks.xstream.io.xml.AbstractPullReader:mark: LineNo@161--->}
com.thoughtworks.xstream.io.path.Path:<init>: LineNo@100--->}
com.thoughtworks.xstream.io.xml.StaxReader:pullText: LineNo@84--->return in.getText();
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@180--->Event event = readEvent();
org.codehaus.jettison.mapped.MappedXMLStreamReader:getText: LineNo@248--->if (currentValue != null
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@65--->if (event == START_DOCUMENT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
org.codehaus.jettison.mapped.MappedXMLStreamReader:getText: LineNo@249--->&& 'null'.equals(currentValue)
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@67--->} else if (event == CHARACTERS) {
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@149--->if (event.type == TEXT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@179--->mark();
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
org.codehaus.jettison.mapped.MappedXMLStreamReader:getText: LineNo@253--->return currentValue;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@150--->event.value = pullText();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@71--->} else if (event == START_ELEMENT || event == END_ELEMENT) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@156--->return event;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@151--->} else if (event.type == START_NODE) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@113--->move();
com.thoughtworks.xstream.io.xml.AbstractPullReader:mark: LineNo@160--->marked = true;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@197--->event = readEvent();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.StaxReader:pullText: LineNo@84--->return in.getText();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@149--->if (event.type == TEXT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@72--->if (event == END_ELEMENT && nodes.size() > 0) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.ReaderWrapper:getValue: LineNo@48--->return wrapped.getValue();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@156--->return event;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@194--->} else if (event.type != COMMENT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@118--->final Event event = readEvent();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@97--->if (nodes.size() > 0) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@149--->if (event.type == TEXT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@176--->String last = null;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@184--->if (text != null && text.length() > 0) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@150--->event.value = pullText();
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@182--->if (event.type == TEXT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@182--->if (event.type == TEXT) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@97--->if (nodes.size() > 0) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@83--->if (currentValue != null) {
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@164--->while(lookahead.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@180--->Event event = readEvent();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@197--->event = readEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@99--->if (event == START_ELEMENT && next.getName().getLocalPart().equals(valueKey)) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@68--->event = END_ELEMENT;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@165--->lookback.push(lookahead.pop());
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@199--->reset();
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@151--->} else if (event.type == START_NODE) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@185--->if (last == null) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@183--->String text = event.value;
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@43--->stack[pointer] = null;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@194--->} else if (event.type != COMMENT) {
com.thoughtworks.xstream.core.util.WeakCache:get: LineNo@59--->Reference reference = (Reference)map.get(key);
com.thoughtworks.xstream.converters.basic.StringConverter:fromString: LineNo@89--->String s = (String)cache.get(str);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@99--->if (event == START_ELEMENT && next.getName().getLocalPart().equals(valueKey)) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@84--->event = CHARACTERS;
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@164--->while(lookahead.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@165--->lookback.push(lookahead.pop());
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@164--->while(lookahead.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@165--->lookback.push(lookahead.pop());
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@138--->if (lookback.hasStuff()) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@104--->return event;
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@165--->lookback.push(lookahead.pop());
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@156--->return event;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@186--->last = text;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@200--->if (buffer != null) {
com.thoughtworks.xstream.core.util.WeakCache:get: LineNo@60--->return reference != null ? reference.get() : null;
com.thoughtworks.xstream.converters.SingleValueConverterWrapper:fromString: LineNo@41--->return wrapped.fromString(str);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@104--->return event;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@65--->if (event == START_DOCUMENT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@118--->final Event event = readEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@167--->marked = false;
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@138--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@85--->mark();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.converters.SingleValueConverterWrapper:unmarshal: LineNo@49--->return fromString(reader.getValue());
com.thoughtworks.xstream.io.xml.AbstractPullReader:getValue: LineNo@203--->return (last == null) ? '' : last;
com.thoughtworks.xstream.converters.basic.StringConverter:fromString: LineNo@89--->String s = (String)cache.get(str);
com.thoughtworks.xstream.converters.basic.StringConverter:fromString: LineNo@88--->if (cache != null && str != null && (lengthLimit < 0 || str.length() <= lengthLimit)) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@67--->} else if (event == CHARACTERS) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@138--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@139--->return (Event) lookback.pop();
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@64--->return END_NODE;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@111--->int currentDepth = elementStack.size();
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@66--->return TEXT;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@139--->return (Event) lookback.pop();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:mark: LineNo@160--->marked = true;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.ReaderWrapper:hasMoreChildren: LineNo@32--->return wrapped.hasMoreChildren();
com.thoughtworks.xstream.io.ReaderWrapper:getValue: LineNo@48--->return wrapped.getValue();
com.thoughtworks.xstream.converters.basic.StringConverter:fromString: LineNo@95--->s = str;
com.thoughtworks.xstream.converters.basic.StringConverter:fromString: LineNo@91--->if (s == null) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@70--->currentValue = null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@74--->if (popArrayNodes > 0) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@65--->if (event == START_DOCUMENT) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@73--->node = (Node) nodes.peek();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@139--->return (Event) lookback.pop();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@138--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@113--->move();
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@112--->while (elementStack.size() >= currentDepth) {
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@92--->reader.moveUp();
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@87--->switch (readEvent().type) {
com.thoughtworks.xstream.converters.SingleValueConverterWrapper:unmarshal: LineNo@49--->return fromString(reader.getValue());
com.thoughtworks.xstream.converters.basic.StringConverter:fromString: LineNo@98--->return s;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@83--->if (currentValue != null) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@67--->} else if (event == CHARACTERS) {
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@118--->final Event event = readEvent();
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@119--->pool.push(event);
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@120--->switch (event.type) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@112--->while (elementStack.size() >= currentDepth) {
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.io.path.PathTrackingReader:moveUp: LineNo@42--->super.moveUp();
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@87--->switch (readEvent().type) {
com.thoughtworks.xstream.converters.SingleValueConverterWrapper:fromString: LineNo@41--->return wrapped.fromString(str);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@71--->} else if (event == START_ELEMENT || event == END_ELEMENT) {
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@125--->elementStack.pop();
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.io.ReaderWrapper:moveUp: LineNo@40--->wrapped.moveUp();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@93--->return false;
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@89--->while (reader.hasMoreChildren()) {
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@81--->types.popSilently();
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@72--->return converter.unmarshal(reader, this);
com.thoughtworks.xstream.converters.SingleValueConverterWrapper:unmarshal: LineNo@49--->return fromString(reader.getValue());
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@43--->stack[pointer] = null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@72--->if (event == END_ELEMENT && nodes.size() > 0) {
org.codehaus.jettison.util.FastStack:peek: LineNo@41--->return get(size() - 1);
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@112--->while (elementStack.size() >= currentDepth) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.ReaderWrapper:hasMoreChildren: LineNo@32--->return wrapped.hasMoreChildren();
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@81--->types.popSilently();
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@72--->return converter.unmarshal(reader, this);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
org.codehaus.jettison.Node:getArray: LineNo@157--->return array;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@73--->node = (Node) nodes.peek();
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@148--->int result = 543645643;
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@81--->types.popSilently();
com.thoughtworks.xstream.converters.collections.CollectionConverter:unmarshal: LineNo@81--->return collection;
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@72--->return converter.unmarshal(reader, this);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@150--->result = 29 * result + chunks[i].hashCode();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@81--->types.popSilently();
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@72--->return converter.unmarshal(reader, this);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@88--->if (nodes.size() > 0) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@97--->if (nodes.size() > 0) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@150--->result = 29 * result + chunks[i].hashCode();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@156--->int dot = k.lastIndexOf( getNamespaceSeparator() );
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@72--->return converter.unmarshal(reader, this);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@89--->event = END_ELEMENT;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@99--->if (event == START_ELEMENT && next.getName().getLocalPart().equals(valueKey)) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@75--->if (currentReferenceKey != null) {
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@150--->result = 29 * result + chunks[i].hashCode();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceSeparator: LineNo@340--->return jsonNamespaceSeparator == null ? DOT_NAMESPACE_SEP : jsonNamespaceSeparator;
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@104--->String k = (String) itr.next();
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@106--->if ( this.supressAtAttributes ) {
org.codehaus.jettison.Node:<init>: LineNo@56--->con.processAttributesAndNamespaces(this, object);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@189--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.mapped.MappedNamespaceConvention:isIgnoreEmptyArrayValues: LineNo@327--->return ignoreEmptyArrayValues;
org.codehaus.jettison.AbstractXMLStreamWriter:isArrayKeysWithSlashAvailable: LineNo@97--->return arrayKeysWithSlashAvailable;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@72--->localResult = super.convert(parent, type, converter);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@104--->return event;
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@76--->values.put(currentReferenceKey, result == null ? NULL : result);
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@152--->return result;
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@92--->reader.moveUp();
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@156--->int dot = k.lastIndexOf( getNamespaceSeparator() );
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@118--->if ( k.startsWith( attributeKey ) ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@103--->for (Iterator<?> itr = object.keys(); itr.hasNext();) {
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@189--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@191--->values.put(value);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@74--->result = localResult;
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@76--->values.put(currentReferenceKey, result == null ? NULL : result);
com.thoughtworks.xstream.io.path.PathTrackingReader:moveUp: LineNo@42--->super.moveUp();
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@157--->if ( dot != -1 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@103--->for (Iterator<?> itr = object.keys(); itr.hasNext();) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@191--->values.put(value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@193--->object.put(property.getKey(), values);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@81--->return result;
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@64--->return END_NODE;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@78--->parentStack.popSilently();
com.thoughtworks.xstream.io.ReaderWrapper:moveUp: LineNo@40--->wrapped.moveUp();
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@103--->for (Iterator<?> itr = object.keys(); itr.hasNext();) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@140--->this.object = object;
org.codehaus.jettison.json.JSONArray:put: LineNo@634--->return this;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@193--->object.put(property.getKey(), values);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@66--->return convert(parent, type, converter);
com.thoughtworks.xstream.core.util.FastStack:popSilently: LineNo@38--->stack[--pointer] = null;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@186--->} else if(getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@168--->if(value instanceof String && !((String)value).isEmpty()) {
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@171--->Object old = object.opt(property.getKey());
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@186--->} else if(getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveUp: LineNo@112--->while (elementStack.size() >= currentDepth) {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@90--->}
org.codehaus.jettison.mapped.MappedNamespaceConvention:processAttributesAndNamespaces: LineNo@164--->}
org.codehaus.jettison.Node:<init>: LineNo@61--->}
org.codehaus.jettison.json.JSONTokener:back: LineNo@76--->}
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@50--->return convertAnother(parent, type, null);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@225--->String nsSeparator = getNamespaceSeparator();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceSeparator: LineNo@340--->return jsonNamespaceSeparator == null ? DOT_NAMESPACE_SEP : jsonNamespaceSeparator;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@238--->String xns = (String) getNamespaceURI( jns );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@225--->String nsSeparator = getNamespaceSeparator();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI: LineNo@172--->if ( ignoreNamespaces ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@231--->dot = 0;
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@70--->this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
org.codehaus.jettison.mapped.Configuration:<init>: LineNo@78--->private Set primitiveArrayKeys = Collections.EMPTY_SET;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@226--->int dot = name.lastIndexOf( nsSeparator );
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI: LineNo@176--->return (String) jnsToXns.get( prefix );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@237--->String jns = name.substring( 0, dot );
org.codehaus.jettison.mapped.Configuration:getPrimitiveArrayKeys: LineNo@158--->return primitiveArrayKeys;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@230--->if ( dot == -1 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@238--->String xns = (String) getNamespaceURI( jns );
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@70--->this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@70--->this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@241--->qname = new QName( name );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@240--->if ( xns == null ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@74--->this.jsonNamespaceSeparator = config.getJsonNamespaceSeparator();
org.codehaus.jettison.mapped.Configuration:getPrimitiveArrayKeys: LineNo@158--->return primitiveArrayKeys;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@206--->return createQName( rootName );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@247--->return qname;
org.codehaus.jettison.Node:<init>: LineNo@64--->this.name = con.createQName(name, this);
org.codehaus.jettison.mapped.Configuration:getJsonNamespaceSeparator: LineNo@209--->return jsonNamespaceSeparator;
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@70--->this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@70--->this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@150--->nodes.push(node);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@149--->node = new Node(nextKey, convention);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@228--->String local = name;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@206--->return createQName( rootName );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@225--->String nsSeparator = getNamespaceSeparator();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@225--->String nsSeparator = getNamespaceSeparator();
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@74--->this.jsonNamespaceSeparator = config.getJsonNamespaceSeparator();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@159--->node.setArrayIndex(0);
org.codehaus.jettison.mapped.Configuration:getPrimitiveArrayKeys: LineNo@158--->return primitiveArrayKeys;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@150--->nodes.push(node);
org.codehaus.jettison.Node:<init>: LineNo@64--->this.name = con.createQName(name, this);
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceSeparator: LineNo@340--->return jsonNamespaceSeparator == null ? DOT_NAMESPACE_SEP : jsonNamespaceSeparator;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@238--->String xns = (String) getNamespaceURI( jns );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@238--->String xns = (String) getNamespaceURI( jns );
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceSeparator: LineNo@340--->return jsonNamespaceSeparator == null ? DOT_NAMESPACE_SEP : jsonNamespaceSeparator;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@160--->nodes.push(node);
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@70--->this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
org.codehaus.jettison.mapped.MappedXMLStreamReader:isAvoidArraySpecificEvents: LineNo@261--->Set<?> keys = convention.getPrimitiveArrayKeys();
org.codehaus.jettison.json.JSONObject:get: LineNo@405--->Object o = opt(key);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@151--->currentValue = (String) newObj;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@99--->if (event == START_ELEMENT && next.getName().getLocalPart().equals(valueKey)) {
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@136--->return classLoader.loadClass(name);
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@164--->while(lookahead.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@165--->lookback.push(lookahead.pop());
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@225--->String nsSeparator = getNamespaceSeparator();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@231--->dot = 0;
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI: LineNo@172--->if ( ignoreNamespaces ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI: LineNo@172--->if ( ignoreNamespaces ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:<init>: LineNo@43--->private Map<Object, Object> jnsToXns = new HashMap<Object, Object>();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@231--->dot = 0;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@225--->String nsSeparator = getNamespaceSeparator();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@139--->if (!''.equals(node.getName().getNamespaceURI())) {
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@160--->nodes.push(node);
org.codehaus.jettison.mapped.MappedNamespaceConvention:getPrimitiveArrayKeys: LineNo@311--->return primitiveArrayKeys;
org.codehaus.jettison.json.JSONObject:opt: LineNo@638--->return key == null ? null : this.myHashMap.get(key);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@152--->event = START_ELEMENT;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@99--->if (event == START_ELEMENT && next.getName().getLocalPart().equals(valueKey)) {
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@79--->return Class.forName(elementName, initialize, classLoader);
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@79--->QName qname = in.getName();
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@118--->final Event event = readEvent();
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@167--->marked = false;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@139--->return (Event) lookback.pop();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@226--->int dot = name.lastIndexOf( nsSeparator );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@237--->String jns = name.substring( 0, dot );
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI: LineNo@176--->return (String) jnsToXns.get( prefix );
org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI: LineNo@176--->return (String) jnsToXns.get( prefix );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@237--->String jns = name.substring( 0, dot );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@226--->int dot = name.lastIndexOf( nsSeparator );
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@139--->if (!''.equals(node.getName().getNamespaceURI())) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@161--->processElement();
org.codehaus.jettison.mapped.MappedXMLStreamReader:isAvoidArraySpecificEvents: LineNo@261--->Set<?> keys = convention.getPrimitiveArrayKeys();
org.codehaus.jettison.json.JSONObject:get: LineNo@405--->Object o = opt(key);
org.codehaus.jettison.json.JSONObject:get: LineNo@406--->if (o == null) {
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@85--->mark();
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@104--->return event;
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@78--->final String packageName = (String)nameToPackage.get(name);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@152--->event.value = pullElementName();
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@90--->return true;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@119--->pool.push(event);
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@118--->final Event event = readEvent();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@138--->if (lookback.hasStuff()) {
org.codehaus.jettison.Node:<init>: LineNo@45--->this.parent = parent;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@230--->if ( dot == -1 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@238--->String xns = (String) getNamespaceURI( jns );
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@52--->} else if (top instanceof JSONArray && !(((JSONArray)top).length() == 1 && ((JSONArray)top).get(0).equals(''))) {
org.codehaus.jettison.json.JSONArray:length: LineNo@359--->return this.myArrayList.size();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@238--->String xns = (String) getNamespaceURI( jns );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@230--->if ( dot == -1 ) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@143--->node.setArrayIndex(index);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@109--->Object newObj = null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@158--->node.setArray(array);
org.codehaus.jettison.mapped.MappedXMLStreamReader:isAvoidArraySpecificEvents: LineNo@262--->return keys != null && keys.contains(key);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processUniformArrayIfPossible: LineNo@183--->if (!isAvoidArraySpecificEvents(arrayKey)) {
org.codehaus.jettison.json.JSONObject:get: LineNo@410--->return o;
org.codehaus.jettison.Node:getObject: LineNo@149--->return object;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@146--->newObj = node.getObject().get(nextKey);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@148--->if (newObj instanceof String) {
com.thoughtworks.xstream.mapper.DefaultMapper:aliasForAttribute: LineNo@90--->return attribute;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@149--->if (event.type == TEXT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:mark: LineNo@160--->marked = true;
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@89--->while (reader.hasMoreChildren()) {
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@44--->return result;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@80--->if (packageName != null) {
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@88--->return super.realClass(elementName);
com.thoughtworks.xstream.mapper.DynamicProxyMapper:realClass: LineNo@55--->return super.realClass(elementName);
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@79--->QName qname = in.getName();
com.thoughtworks.xstream.io.ReaderWrapper:hasMoreChildren: LineNo@32--->return wrapped.hasMoreChildren();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@138--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@139--->return (Event) lookback.pop();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@166--->nodes.push(node);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@165--->node = new Node((Node)nodes.peek(), nextKey, (JSONObject) newObj, convention);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@240--->if ( xns == null ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@241--->qname = new QName( name );
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@201--->this();
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@52--->} else if (top instanceof JSONArray && !(((JSONArray)top).length() == 1 && ((JSONArray)top).get(0).equals(''))) {
org.codehaus.jettison.json.JSONObject:equals: LineNo@1124--->if (obj instanceof JSONObject) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@44--->String rootName = (String) obj.keys().next();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@241--->qname = new QName( name );
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@240--->if ( xns == null ) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@143--->node.setArrayIndex(index);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@158--->node.setArray(array);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@110--->String nextKey = null;
org.codehaus.jettison.json.JSONArray:opt: LineNo@370--->return (index < 0 || index >= length()) ?
org.codehaus.jettison.json.JSONArray:length: LineNo@359--->return this.myArrayList.size();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@159--->node.setArrayIndex(0);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processUniformArrayIfPossible: LineNo@183--->if (!isAvoidArraySpecificEvents(arrayKey)) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@146--->newObj = node.getObject().get(nextKey);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@154--->} else if (newObj instanceof JSONArray) {
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@31--->return alias == null ? super.aliasForAttribute(attribute) : alias;
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@30--->String alias = (String)nameToAlias.get(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@29--->alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.DefaultMapper:aliasForSystemAttribute: LineNo@98--->return attribute;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@151--->} else if (event.type == START_NODE) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@131--->if (marked) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.ReaderWrapper:hasMoreChildren: LineNo@32--->return wrapped.hasMoreChildren();
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@61--->return START_NODE;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@86--->} while (dot >= 0);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@79--->QName qname = in.getName();
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@103--->move();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@80--->return qnameMap.getJavaClassName(qname);
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@43--->stack[pointer] = null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@166--->nodes.push(node);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@206--->return createQName( rootName );
org.codehaus.jettison.Node:<init>: LineNo@60--->this.name = con.createQName(name, this);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@247--->return qname;
com.thoughtworks.xstream.mapper.DynamicProxyMapper:realClass: LineNo@52--->if (elementName.equals(alias)) {
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@66--->Class resultingClass = Primitives.primitiveType(elementName);
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@162--->this(false, null, true, true);
org.codehaus.jettison.mapped.MappedXMLInputFactory:createJSONObject: LineNo@59--->return new JSONObject(tokener);
org.codehaus.jettison.json.JSONArray:length: LineNo@359--->return this.myArrayList.size();
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@52--->} else if (top instanceof JSONArray && !(((JSONArray)top).length() == 1 && ((JSONArray)top).get(0).equals(''))) {
org.codehaus.jettison.json.JSONObject:equals: LineNo@1127--->return false;
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@49--->Object top = obj.get(rootName);
org.codehaus.jettison.mapped.MappedXMLInputFactory:createXMLStreamReader: LineNo@45--->return new MappedXMLStreamReader(root, convention);
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@247--->return qname;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@144--->} else {
org.codehaus.jettison.Node:setArray: LineNo@161--->this.array = array;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@111--->if (node.getArray() != null) {
org.codehaus.jettison.json.JSONArray:opt: LineNo@370--->return (index < 0 || index >= length()) ?
org.codehaus.jettison.json.JSONArray:length: LineNo@359--->return this.myArrayList.size();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@113--->if (index >= node.getArray().length()) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@111--->if (node.getArray() != null) {
org.codehaus.jettison.Node:setArrayIndex: LineNo@169--->this.arrayIndex = arrayIndex;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processUniformArrayIfPossible: LineNo@184--->return false;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@155--->JSONArray array = (JSONArray) newObj;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@156--->if (!processUniformArrayIfPossible(nextKey, array)) {
org.codehaus.jettison.Node:<init>: LineNo@64--->this.name = con.createQName(name, this);
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@31--->return alias == null ? super.aliasForAttribute(attribute) : alias;
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@31--->alias = super.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@27--->String alias = (String)nameToAlias.get(attribute);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@156--->return event;
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@87--->switch (readEvent().type) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@148--->event.type = pullNextEvent();
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@42--->name = boxedTypeName(type);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.DefaultMapper:aliasForAttribute: LineNo@90--->return attribute;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@88--->return super.realClass(elementName);
com.thoughtworks.xstream.io.naming.NoNameCoder:decodeNode: LineNo@37--->return nodeName;
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.core.util.FastStack:peek: LineNo@48--->return pointer == 0 ? null : stack[pointer - 1];
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@120--->switch (event.type) {
com.thoughtworks.xstream.io.xml.QNameMap:getJavaClassName: LineNo@41--->if (qnameToJava != null) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@167--->event = START_ELEMENT;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@228--->String local = name;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@206--->return createQName( rootName );
com.thoughtworks.xstream.mapper.DynamicProxyMapper:realClass: LineNo@55--->return super.realClass(elementName);
com.thoughtworks.xstream.core.util.Primitives:primitiveType: LineNo@100--->return (Class)NAMED_PRIMITIVE.get(name);
com.thoughtworks.xstream.io.xml.StaxReader:pullNextEvent: LineNo@58--->switch(in.next()) {
org.codehaus.jettison.Node:<init>: LineNo@58--->keys = object.keys();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@171--->this.myHashMap = new LinkedHashMap();
org.codehaus.jettison.mapped.MappedXMLInputFactory:createXMLStreamReader: LineNo@44--->JSONObject root = createJSONObject(tokener);
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@52--->} else if (top instanceof JSONArray && !(((JSONArray)top).length() == 1 && ((JSONArray)top).get(0).equals(''))) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@44--->String rootName = (String) obj.keys().next();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@206--->return createQName( rootName );
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@148--->if (newObj instanceof String) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@113--->if (index >= node.getArray().length()) {
org.codehaus.jettison.Node:getArray: LineNo@157--->return array;
org.codehaus.jettison.json.JSONArray:opt: LineNo@370--->return (index < 0 || index >= length()) ?
org.codehaus.jettison.json.JSONArray:get: LineNo@192--->Object o = opt(index);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@113--->if (index >= node.getArray().length()) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@112--->int index = node.getArrayIndex();
org.codehaus.jettison.Node:getArrayIndex: LineNo@165--->return arrayIndex;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@156--->if (!processUniformArrayIfPossible(nextKey, array)) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@206--->return createQName( rootName );
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@145--->nextKey = (String) node.getKeys().next();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@86--->processElement();
org.codehaus.jettison.json.JSONObject:get: LineNo@405--->Object o = opt(key);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@28--->if (alias == null && !nameToAlias.containsKey(attribute)) {
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@29--->alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@164--->while(lookahead.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@132--->if (lookback.hasStuff()) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@87--->switch (readEvent().type) {
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.util.Primitives:isBoxed: LineNo@89--->return UNBOX.containsKey(type);
com.thoughtworks.xstream.mapper.ArrayMapper:boxedTypeName: LineNo@93--->return Primitives.isBoxed(type) ? type.getName() : null;
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@29--->alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.DefaultMapper:aliasForSystemAttribute: LineNo@98--->return attribute;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@30--->String alias = (String)nameToAlias.get(attribute);
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@31--->return alias == null ? super.aliasForAttribute(attribute) : alias;
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@122--->elementStack.push(pullElementName());
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@79--->QName qname = in.getName();
com.thoughtworks.xstream.io.xml.AbstractPullReader:move: LineNo@122--->elementStack.push(pullElementName());
com.thoughtworks.xstream.io.xml.QNameMap:getJavaClassName: LineNo@47--->return qname.getLocalPart();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@99--->if (event == START_ELEMENT && next.getName().getLocalPart().equals(valueKey)) {
org.codehaus.jettison.Node:<init>: LineNo@60--->this.name = con.createQName(name, this);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@66--->Class resultingClass = Primitives.primitiveType(elementName);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@42--->name = boxedTypeName(type);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@65--->if (event == START_DOCUMENT) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
org.codehaus.jettison.Node:<init>: LineNo@46--->this.object = object;
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.mapped.MappedXMLStreamReader:<init>: LineNo@53--->this.node = new Node(null, rootName, obj, convention);
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
org.codehaus.jettison.Node:<init>: LineNo@64--->this.name = con.createQName(name, this);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@154--->} else if (newObj instanceof JSONArray) {
org.codehaus.jettison.Node:getArray: LineNo@157--->return array;
org.codehaus.jettison.json.JSONArray:get: LineNo@193--->if (o == null) {
org.codehaus.jettison.json.JSONArray:get: LineNo@192--->Object o = opt(index);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@137--->newObj = node.getArray().get(index++);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@112--->int index = node.getArrayIndex();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@157--->node = new Node(nextKey, convention);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName: LineNo@228--->String local = name;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@110--->String nextKey = null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@109--->Object newObj = null;
org.codehaus.jettison.json.JSONObject:opt: LineNo@638--->return key == null ? null : this.myHashMap.get(key);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@31--->alias = super.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@30--->if (alias == attribute) {
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@128--->Integer integer = ((Integer) indexMapStack[idx].get(pathStack[idx]));
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@165--->lookback.push(lookahead.pop());
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
com.thoughtworks.xstream.io.xml.AbstractPullReader:readEvent: LineNo@135--->return (Event) lookahead.push(readRealEvent());
com.thoughtworks.xstream.io.xml.AbstractPullReader:hasMoreChildren: LineNo@89--->reset();
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.io.naming.NoNameCoder:decodeNode: LineNo@37--->return nodeName;
com.thoughtworks.xstream.core.util.FastStack:peek: LineNo@48--->return pointer == 0 ? null : stack[pointer - 1];
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@55--->if (alias != null) {
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@54--->String alias = (String) classToName.get(type.getName());
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@31--->while (type.isArray()) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@30--->String name = null;
com.thoughtworks.xstream.mapper.ArrayMapper:boxedTypeName: LineNo@93--->return Primitives.isBoxed(type) ? type.getName() : null;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@27--->String alias = (String)nameToAlias.get(attribute);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@31--->return alias == null ? super.aliasForAttribute(attribute) : alias;
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@31--->alias = super.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@79--->return super.realClass(elementName);
com.thoughtworks.xstream.mapper.ArrayMapper:realClass: LineNo@58--->while (elementName.endsWith('-array')) {
com.thoughtworks.xstream.mapper.ArrayMapper:realClass: LineNo@55--->int dimensions = 0;
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.io.ReaderWrapper:getNodeName: LineNo@44--->return wrapped.getNodeName();
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@102--->while (elementStack.size() <= currentDepth) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@80--->return qnameMap.getJavaClassName(qname);
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:addAll: LineNo@110--->result |= add(iter.next());
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@67--->if( resultingClass != null ){
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.util.Primitives:isBoxed: LineNo@89--->return UNBOX.containsKey(type);
com.thoughtworks.xstream.mapper.ArrayMapper:boxedTypeName: LineNo@93--->return Primitives.isBoxed(type) ? type.getName() : null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@67--->} else if (event == CHARACTERS) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent: LineNo@147--->Event event = pool.hasStuff() ? (Event)pool.pop() : new Event();
org.codehaus.jettison.Node:<init>: LineNo@58--->keys = object.keys();
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@138--->nextKey = node.getName().getLocalPart();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@164--->} else if (newObj instanceof JSONObject) {
org.codehaus.jettison.Node:getArray: LineNo@157--->return array;
org.codehaus.jettison.json.JSONArray:get: LineNo@196--->return o;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@137--->newObj = node.getArray().get(index++);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@157--->node = new Node(nextKey, convention);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@111--->if (node.getArray() != null) {
org.codehaus.jettison.Node:getArray: LineNo@157--->return array;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@146--->newObj = node.getObject().get(nextKey);
org.codehaus.jettison.json.JSONObject:get: LineNo@406--->if (o == null) {
org.codehaus.jettison.json.JSONObject:get: LineNo@405--->Object o = opt(key);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@34--->return alias;
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@37--->String attributeName = mapper.aliasForSystemAttribute('resolves-to');
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@126--->int idx = pointer + i - 1;
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@123--->if (i < -pointer || i > 0) {
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@129--->int index = integer.intValue();
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@72--->Class type = Primitives.primitiveType(mappedName);
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@79--->return super.realClass(elementName);
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@74--->if (permission.allows(type))
com.thoughtworks.xstream.core.util.FastStack:pop: LineNo@42--->final Object result = stack[--pointer];
com.thoughtworks.xstream.io.xml.AbstractPullReader:reset: LineNo@164--->while(lookahead.hasStuff()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@56--->return alias;
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@45--->name = super.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@41--->if (name == null) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@42--->name = boxedTypeName(type);
org.codehaus.jettison.AbstractXMLStreamReader:getAttributeValue: LineNo@103--->return (String) node.getAttributes().get(new QName(ns, local));
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@29--->alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@28--->if (alias == null && !nameToAlias.containsKey(attribute)) {
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.ArrayMapper:realClass: LineNo@63--->if (dimensions > 0) {
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@74--->if (permission.allows(type))
com.thoughtworks.xstream.io.path.PathTrackingReader:moveDown: LineNo@38--->pathTracker.pushElement(getNodeName());
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.io.path.PathTrackingReader:moveDown: LineNo@38--->pathTracker.pushElement(getNodeName());
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@104--->if (elementStack.size() < currentDepth) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@104--->if (elementStack.size() < currentDepth) {
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:add: LineNo@117--->if (classLoader != null) {
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:add: LineNo@116--->Object classLoader = ((WeakReference)ref).get();
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@71--->boolean initialize = true;
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@54--->String alias = (String) classToName.get(type.getName());
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@55--->if (alias != null) {
com.thoughtworks.xstream.mapper.ArrayMapper:boxedTypeName: LineNo@93--->return Primitives.isBoxed(type) ? type.getName() : null;
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@31--->while (type.isArray()) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@30--->String name = null;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@71--->} else if (event == START_ELEMENT || event == END_ELEMENT) {
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
org.codehaus.jettison.util.FastStack:peek: LineNo@41--->return get(size() - 1);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@138--->nextKey = node.getName().getLocalPart();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@165--->node = new Node((Node)nodes.peek(), nextKey, (JSONObject) newObj, convention);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@171--->this.myHashMap = new LinkedHashMap();
org.codehaus.jettison.Node:<init>: LineNo@58--->keys = object.keys();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@137--->newObj = node.getArray().get(index++);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@111--->if (node.getArray() != null) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@146--->newObj = node.getObject().get(nextKey);
org.codehaus.jettison.Node:getObject: LineNo@149--->return object;
org.codehaus.jettison.json.JSONObject:get: LineNo@410--->return o;
com.thoughtworks.xstream.io.AbstractReader:encodeAttribute: LineNo@97--->return nameCoder.encodeAttribute(name);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@135--->name = pathStack[idx];
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@130--->if (index > 1) {
com.thoughtworks.xstream.mapper.ArrayMapper:realClass: LineNo@74--->return super.realClass(elementName);
com.thoughtworks.xstream.core.util.Primitives:primitiveType: LineNo@100--->return (Class)NAMED_PRIMITIVE.get(name);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@73--->int length = elementName.length();
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@77--->final String name = dot < 0 ? '' : elementName.substring(0, dot) + '.';
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@78--->final String packageName = (String)nameToPackage.get(name);
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@31--->if (type != null) {
com.thoughtworks.xstream.core.util.FastStack:hasStuff: LineNo@66--->return pointer > 0;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@55--->if (alias != null) {
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@54--->String alias = (String) classToName.get(type.getName());
com.thoughtworks.xstream.mapper.ArrayMapper:boxedTypeName: LineNo@93--->return Primitives.isBoxed(type) ? type.getName() : null;
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@29--->StringBuffer arraySuffix = new StringBuffer();
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@44--->if (name == null) {
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@26--->String classAttribute = readClassAttribute(reader, mapper);
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@30--->if (alias == attribute) {
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@31--->alias = super.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.ArrayMapper:realClass: LineNo@74--->return super.realClass(elementName);
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@71--->final Class type = super.realClass(elementName);
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@72--->for (int i = 0; i < permissions.size(); ++i) {
com.thoughtworks.xstream.security.ExplicitTypePermission:allows: LineNo@49--->if (type == null)
com.thoughtworks.xstream.io.ReaderWrapper:getNodeName: LineNo@44--->return wrapped.getNodeName();
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@76--->if (pointer + 1 >= capacity) {
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@102--->while (elementStack.size() <= currentDepth) {
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:add: LineNo@118--->return super.add(classLoader);
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:addAll: LineNo@108--->boolean result = false;
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:addAll: LineNo@109--->for(Iterator iter = c.iterator(); iter.hasNext(); ) {
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@125--->cleanup();
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@73--->if (elementName.startsWith(XSTREAM_PACKAGE_ROOT)) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@45--->name = super.serializedClass(type);
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@56--->return alias;
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@42--->name = boxedTypeName(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@41--->if (name == null) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@72--->if (event == END_ELEMENT && nodes.size() > 0) {
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@165--->node = new Node((Node)nodes.peek(), nextKey, (JSONObject) newObj, convention);
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.Node:<init>: LineNo@46--->this.object = object;
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@145--->nextKey = (String) node.getKeys().next();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@146--->newObj = node.getObject().get(nextKey);
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeAttribute: LineNo@44--->return name;
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@37--->String attributeName = mapper.aliasForSystemAttribute('resolves-to');
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@137--->return name;
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@71--->if (mappedName != null) {
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@72--->Class type = Primitives.primitiveType(mappedName);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@76--->dot = elementName.lastIndexOf('.', length);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@80--->if (packageName != null) {
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@32--->final String name = type.getName();
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@34--->if (patterns[i].matcher(name).matches())
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@33--->for (int i = 0; i < patterns.length; ++i)
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@72--->for (int i = 0; i < permissions.size(); ++i) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.mapper.ClassAliasingMapper:serializedClass: LineNo@56--->return alias;
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@45--->name = super.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@42--->name = boxedTypeName(type);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@329--->back();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@224--->c = x.nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@47--->if (arraySuffix.length() > 0) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@45--->name = super.serializedClass(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@38--->String classAttribute = attributeName == null ? null : reader.getAttribute(attributeName);
com.thoughtworks.xstream.io.ReaderWrapper:getAttribute: LineNo@52--->return wrapped.getAttribute(name);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@40--->attributeName = mapper.aliasForSystemAttribute('class');
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@34--->return alias;
com.thoughtworks.xstream.io.AbstractReader:encodeAttribute: LineNo@97--->return nameCoder.encodeAttribute(name);
org.codehaus.jettison.AbstractXMLStreamReader:getAttributeValue: LineNo@103--->return (String) node.getAttributes().get(new QName(ns, local));
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@74--->if (permission.allows(type))
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@73--->final TypePermission permission = (TypePermission)permissions.get(i);
com.thoughtworks.xstream.security.ExplicitTypePermission:allows: LineNo@51--->return names.contains(type.getName());
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@79--->pathStack[pointer] = name;
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@79--->QName qname = in.getName();
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:addAll: LineNo@110--->result |= add(iter.next());
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:addAll: LineNo@109--->for(Iterator iter = c.iterator(); iter.hasNext(); ) {
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@125--->cleanup();
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@76--->classLoader = classLoaderReference.getReference();
com.thoughtworks.xstream.core.ClassLoaderReference:getReference: LineNo@31--->return reference;
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@44--->if (name == null) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@29--->StringBuffer arraySuffix = new StringBuffer();
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.DefaultMapper:isImmutableValueType: LineNo@102--->return false;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.DefaultMapper:aliasForAttribute: LineNo@90--->return attribute;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@83--->if (currentValue != null) {
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.Node:<init>: LineNo@58--->keys = object.keys();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@145--->nextKey = (String) node.getKeys().next();
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@148--->if (newObj instanceof String) {
com.thoughtworks.xstream.io.AbstractReader:encodeAttribute: LineNo@97--->return nameCoder.encodeAttribute(name);
com.thoughtworks.xstream.io.ReaderWrapper:getAttribute: LineNo@52--->return wrapped.getAttribute(name);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@172--->currentPath = new Path(chunks);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@169--->final String name = peekElement(i);
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@128--->Integer integer = ((Integer) indexMapStack[idx].get(pathStack[idx]));
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@69--->String mappedName = (String) nameToType.get(elementName);
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@73--->if (type != null) {
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@86--->} while (dot >= 0);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@85--->length = dot - 1;
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@77--->final String name = dot < 0 ? '' : elementName.substring(0, dot) + '.';
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@78--->final String packageName = (String)nameToPackage.get(name);
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@34--->if (patterns[i].matcher(name).matches())
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@33--->for (int i = 0; i < patterns.length; ++i)
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@73--->final TypePermission permission = (TypePermission)permissions.get(i);
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@29--->StringBuffer arraySuffix = new StringBuffer();
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@44--->if (name == null) {
com.thoughtworks.xstream.io.ReaderWrapper:getNodeName: LineNo@44--->return wrapped.getNodeName();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:back: LineNo@73--->if (this.myIndex > 0) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@50--->return name;
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@38--->String classAttribute = attributeName == null ? null : reader.getAttribute(attributeName);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeAttribute: LineNo@44--->return name;
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@42--->classAttribute = reader.getAttribute(attributeName);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@29--->type = mapper.realClass(reader.getNodeName());
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@38--->Object cached = realClassCache.get(elementName);
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@71--->final Class type = super.realClass(elementName);
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@74--->if (permission.allows(type))
com.thoughtworks.xstream.io.naming.NoNameCoder:decodeNode: LineNo@37--->return nodeName;
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.core.util.FastStack:peek: LineNo@48--->return pointer == 0 ? null : stack[pointer - 1];
org.codehaus.jettison.Node:getName: LineNo@145--->return name;
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:addAll: LineNo@112--->return result;
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@126--->copy.addAll(classLoaders);
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@77--->initialize = elementName.charAt(0) == '[';
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@105--->List copy = new ArrayList(classLoaders.size()) {
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@76--->classLoader = classLoaderReference.getReference();
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@169--->final String name = peekElement(i);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@45--->name = super.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@47--->if (arraySuffix.length() > 0) {
com.thoughtworks.xstream.mapper.EnumMapper:isImmutableValueType: LineNo@67--->return (Enum.class.isAssignableFrom(type)) || super.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@29--->alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.DefaultMapper:aliasForSystemAttribute: LineNo@98--->return attribute;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@31--->return alias == null ? super.aliasForAttribute(attribute) : alias;
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@30--->String alias = (String)nameToAlias.get(attribute);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.util.FastStack:peek: LineNo@41--->return get(size() - 1);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@97--->if (nodes.size() > 0) {
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
com.thoughtworks.xstream.io.ReaderWrapper:getAttribute: LineNo@52--->return wrapped.getAttribute(name);
org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement: LineNo@149--->node = new Node(nextKey, convention);
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@174--->return currentPath;
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@126--->int idx = pointer + i - 1;
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@170--->chunks[i + pointer] = name;
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@123--->if (i < -pointer || i > 0) {
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@129--->int index = integer.intValue();
com.thoughtworks.xstream.mapper.ClassAliasingMapper:realClass: LineNo@76--->elementName = mappedName;
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@85--->length = dot - 1;
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@76--->dot = elementName.lastIndexOf('.', length);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@80--->if (packageName != null) {
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@33--->for (int i = 0; i < patterns.length; ++i)
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@326--->back();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@47--->if (arraySuffix.length() > 0) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@45--->name = super.serializedClass(type);
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@79--->pathStack[pointer] = name;
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
org.codehaus.jettison.json.JSONTokener:back: LineNo@74--->this.myIndex -= 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@53--->if (type == null) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@64--->return baseType == null ? super.serializedClass(type) : super.serializedClass(baseType);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@63--->Class baseType = (Class)implToType.get(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@39--->if (classAttribute == null) {
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@40--->attributeName = mapper.aliasForSystemAttribute('class');
com.thoughtworks.xstream.io.AbstractReader:encodeAttribute: LineNo@97--->return nameCoder.encodeAttribute(name);
com.thoughtworks.xstream.io.ReaderWrapper:getAttribute: LineNo@52--->return wrapped.getAttribute(name);
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@39--->if (cached != null) {
com.thoughtworks.xstream.mapper.SecurityMapper:realClass: LineNo@75--->return type;
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
org.codehaus.jettison.AbstractXMLStreamReader:getName: LineNo@115--->return node.getName();
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@124--->synchronized(this) {
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@126--->copy.addAll(classLoaders);
com.thoughtworks.xstream.mapper.DefaultMapper:realClass: LineNo@79--->return Class.forName(elementName, initialize, classLoader);
com.thoughtworks.xstream.core.util.CompositeClassLoader$1:<init>: LineNo@105--->List copy = new ArrayList(classLoaders.size()) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@96--->Object id = map.get(new IdWrapper(obj));
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:<init>: LineNo@46--->hashCode = System.identityHashCode(obj);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@50--->return name;
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@64--->return super.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.EnumMapper:isImmutableValueType: LineNo@67--->return (Enum.class.isAssignableFrom(type)) || super.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@27--->String alias = (String)nameToAlias.get(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@31--->alias = super.aliasForAttribute(attribute);
com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute: LineNo@31--->return alias == null ? super.aliasForAttribute(attribute) : alias;
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.util.FastStack:empty: LineNo@34--->return size() == 0;
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
org.codehaus.jettison.Node:getKeys: LineNo@141--->return keys;
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
org.codehaus.jettison.Node:<init>: LineNo@66--->this.attributes = new HashMap();
org.codehaus.jettison.AbstractXMLStreamReader:getAttributeValue: LineNo@103--->return (String) node.getAttributes().get(new QName(ns, local));
com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:getCurrentReferenceKey: LineNo@41--->return pathTracker.getPath();
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@135--->name = pathStack[idx];
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@130--->if (index > 1) {
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@68--->Object currentReferenceKey = getCurrentReferenceKey();
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@76--->dot = elementName.lastIndexOf('.', length);
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@86--->} while (dot >= 0);
com.thoughtworks.xstream.security.RegExpTypePermission:allows: LineNo@37--->return false;
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@216--->x.back();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:back: LineNo@73--->if (this.myIndex > 0) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@39--->primitive = enforce32BitInt ? Integer.valueOf(text) : Long.valueOf(text);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@50--->return name;
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.io.naming.NoNameCoder:decodeNode: LineNo@37--->return nodeName;
com.thoughtworks.xstream.core.util.FastStack:peek: LineNo@48--->return pointer == 0 ? null : stack[pointer - 1];
com.thoughtworks.xstream.mapper.DefaultMapper:isReferenceable: LineNo@106--->return true;
com.thoughtworks.xstream.mapper.EnumMapper:isReferenceable: LineNo@75--->return super.isReferenceable(type);
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
org.codehaus.jettison.json.JSONArray:<init>: LineNo@119--->x.back();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@224--->c = x.nextClean();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@225--->if (c == '=') {
com.thoughtworks.xstream.mapper.DefaultMapper:isImmutableValueType: LineNo@102--->return false;
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@56--->if (Enum.class.isAssignableFrom(type) && type.getSuperclass() != Enum.class) {
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@64--->return baseType == null ? super.serializedClass(type) : super.serializedClass(baseType);
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@61--->return super.serializedClass(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@41--->if (attributeName != null) {
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@42--->classAttribute = reader.getAttribute(attributeName);
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@47--->Class result = super.realClass(elementName);
com.thoughtworks.xstream.mapper.MapperWrapper:realClass: LineNo@125--->return realClassMapper.realClass(elementName);
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.io.ReaderWrapper:getNodeName: LineNo@44--->return wrapped.getNodeName();
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@71--->return super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.DefaultMapper:defaultImplementationOf: LineNo@86--->return type;
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@79--->QName qname = in.getName();
com.thoughtworks.xstream.io.xml.QNameMap:getJavaClassName: LineNo@47--->return qname.getLocalPart();
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@127--->}
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@105--->List copy = new ArrayList(classLoaders.size()) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:hashCode: LineNo@51--->return hashCode;
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@53--->if (type == null) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@64--->return baseType == null ? super.serializedClass(type) : super.serializedClass(baseType);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@61--->if (immutableTypes.contains(type)) {
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:<init>: LineNo@46--->hashCode = System.identityHashCode(obj);
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@96--->Object id = map.get(new IdWrapper(obj));
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@29--->alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@28--->if (alias == null && !nameToAlias.containsKey(attribute)) {
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute: LineNo@149--->return aliasForAttributeMapper.aliasForAttribute(attribute);
org.codehaus.jettison.util.FastStack:peek: LineNo@38--->if (empty())
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@85--->} else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
org.codehaus.jettison.AbstractXMLStreamReader:getAttributeValue: LineNo@103--->return (String) node.getAttributes().get(new QName(ns, local));
org.codehaus.jettison.Node:getAttributes: LineNo@133--->return attributes;
com.thoughtworks.xstream.converters.collections.CollectionConverter:unmarshal: LineNo@80--->populateCollection(reader, context, collection);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@68--->Object currentReferenceKey = getCurrentReferenceKey();
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@69--->parentStack.push(currentReferenceKey);
com.thoughtworks.xstream.io.path.PathTracker:peekElement: LineNo@137--->return name;
com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller:getCurrentReferenceKey: LineNo@41--->return pathTracker.getPath();
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@148--->int result = 543645643;
com.thoughtworks.xstream.mapper.PackageAliasingMapper:realClass: LineNo@77--->final String name = dot < 0 ? '' : elementName.substring(0, dot) + '.';
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:back: LineNo@73--->if (this.myIndex > 0) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@216--->x.back();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:back: LineNo@74--->this.myIndex -= 1;
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@40--->} catch (Exception e) {/**/}
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@66--->writeBareItem(item, context, writer);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.io.AbstractReader:decodeNode: LineNo@64--->return nameCoder.decodeNode(name);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
com.thoughtworks.xstream.mapper.EnumMapper:isReferenceable: LineNo@72--->if (type != null && Enum.class.isAssignableFrom(type)) {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@128--->x.back();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:back: LineNo@73--->if (this.myIndex > 0) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@110--->char c = x.nextClean();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@229--->} else if (c != ':') {
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.EnumMapper:isImmutableValueType: LineNo@67--->return (Enum.class.isAssignableFrom(type)) || super.isImmutableValueType(type);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@66--->if (cachedConverter != null) {
com.thoughtworks.xstream.core.util.Types:isLambdaType: LineNo@22--->return type != null && type.isSynthetic() && lambdaPattern.matcher(type.getSimpleName()).matches();
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@38--->if (Types.isLambdaType(type)) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@58--->} else if (EnumSet.class.isAssignableFrom(type)) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute: LineNo@45--->return classAttribute;
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@48--->realClassCache.put(elementName, result);
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@47--->Class result = super.realClass(elementName);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@29--->type = mapper.realClass(reader.getNodeName());
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@68--->if (typeToImpl.containsKey(type)) {
com.thoughtworks.xstream.io.xml.StaxReader:pullElementName: LineNo@80--->return qnameMap.getJavaClassName(qname);
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isReferenceable: LineNo@69--->if (unreferenceableTypes.contains(type)) {
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@130--->for (Iterator iterator = copy.iterator(); iterator.hasNext();) {
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@131--->ClassLoader classLoader = (ClassLoader) iterator.next();
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@172--->currentPath = new Path(chunks);
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@96--->Object id = map.get(new IdWrapper(obj));
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@56--->if (Enum.class.isAssignableFrom(type) && type.getSuperclass() != Enum.class) {
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@64--->return baseType == null ? super.serializedClass(type) : super.serializedClass(baseType);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@172--->currentPath = new Path(chunks);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@168--->for (int i = -pointer; ++i <= 0; ) {
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@64--->return super.isImmutableValueType(type);
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:hashCode: LineNo@51--->return hashCode;
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@30--->if (alias == attribute) {
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@31--->alias = super.aliasForAttribute(attribute);
org.codehaus.jettison.util.FastStack:peek: LineNo@41--->return get(size() - 1);
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@97--->if (nodes.size() > 0) {
org.codehaus.jettison.Node:getAttributes: LineNo@133--->return attributes;
org.codehaus.jettison.AbstractXMLStreamReader:getAttributeValue: LineNo@103--->return (String) node.getAttributes().get(new QName(ns, local));
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@85--->populateCollection(reader, context, collection, collection);
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@169--->final String name = peekElement(i);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@165--->if (currentPath == null) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@169--->final String name = peekElement(i);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@172--->currentPath = new Path(chunks);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@166--->String[] chunks = new String[pointer + 1];
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@150--->result = 29 * result + chunks[i].hashCode();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:back: LineNo@74--->this.myIndex -= 1;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:back: LineNo@73--->if (this.myIndex > 0) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@42--->if (primitive == null) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1018--->int          len = string.length();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1012--->if (string == null || string.length() == 0) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@39--->primitive = enforce32BitInt ? Integer.valueOf(text) : Long.valueOf(text);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeBareItem: LineNo@94--->context.convertAnother(item);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@64--->return baseType == null ? super.serializedClass(type) : super.serializedClass(baseType);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@68--->if (typeToImpl.containsKey(type)) {
com.thoughtworks.xstream.io.xml.AbstractXmlReader:unescapeXmlName: LineNo@52--->return decodeNode(name);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@29--->type = mapper.realClass(reader.getNodeName());
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@39--->if (cached != null) {
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.EnumMapper:isReferenceable: LineNo@75--->return super.isReferenceable(type);
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isReferenceable: LineNo@72--->return super.isReferenceable(type);
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:back: LineNo@73--->if (this.myIndex > 0) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:back: LineNo@74--->this.myIndex -= 1;
org.codehaus.jettison.json.JSONArray:<init>: LineNo@107--->if (x.nextClean() != '[') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@232--->doPut(key, x.nextValue(), x.getThreshold(), true);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@53--->final Path currentPath = pathTracker.getPath();
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.EnumMapper:isImmutableValueType: LineNo@67--->return (Enum.class.isAssignableFrom(type)) || super.isImmutableValueType(type);
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@64--->return super.isImmutableValueType(type);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@89--->if (clazz != null && out instanceof AbstractXMLStreamWriter) {
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@67--->return cachedConverter;
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@38--->if (Types.isLambdaType(type)) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@61--->return super.serializedClass(type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem: LineNo@131--->Class type = HierarchicalStreams.readClassType(reader, mapper());
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@26--->String classAttribute = readClassAttribute(reader, mapper);
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@49--->return result;
com.thoughtworks.xstream.io.ReaderWrapper:getNodeName: LineNo@44--->return wrapped.getNodeName();
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@136--->final Class defaultImplementation = super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@71--->return super.defaultImplementationOf(type);
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@90--->reader.moveDown();
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@104--->if (elementStack.size() < currentDepth) {
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@104--->if (elementStack.size() < currentDepth) {
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isReferenceable: LineNo@70--->return false;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@54--->final boolean isReferenceable = getMapper().isReferenceable(type);
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@132--->if (classLoader == contextClassLoader) {
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@65--->Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@66--->if (cachedConverter != null) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@174--->return currentPath;
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@97--->return id;
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@172--->currentPath = new Path(chunks);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@172--->currentPath = new Path(chunks);
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@58--->} else if (EnumSet.class.isAssignableFrom(type)) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.util.Types:isLambdaType: LineNo@22--->return type != null && type.isSynthetic() && lambdaPattern.matcher(type.getSimpleName()).matches();
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@38--->if (Types.isLambdaType(type)) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@61--->return super.serializedClass(type);
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@174--->return currentPath;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@96--->Object id = map.get(new IdWrapper(obj));
com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute: LineNo@34--->return alias;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@52--->final String attributeName = getMapper().aliasForSystemAttribute('reference');
org.codehaus.jettison.mapped.MappedXMLStreamReader:next: LineNo@98--->Node next = (Node)nodes.peek();
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
org.codehaus.jettison.Node:getAttributes: LineNo@133--->return attributes;
com.thoughtworks.xstream.converters.collections.CollectionConverter:populateCollection: LineNo@91--->addCurrentElementToCollection(reader, context, collection, target);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@44--->Object parentReferenceKey = parentStack.peek();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@170--->chunks[i + pointer] = name;
com.thoughtworks.xstream.io.path.Path:<init>: LineNo@99--->this.chunks = chunks;
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@150--->result = 29 * result + chunks[i].hashCode();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:back: LineNo@74--->this.myIndex -= 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@209--->c = x.nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@44--->Double v = Double.valueOf(text);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1019--->StringBuilder sb = new StringBuilder(len + 4);
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@40--->} catch (Exception e) {/**/}
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$1:convertAnother: LineNo@88--->AbstractReferenceMarshaller.this.convertAnother(nextItem);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@38--->if (Types.isLambdaType(type)) {
com.thoughtworks.xstream.core.util.Types:isLambdaType: LineNo@22--->return type != null && type.isSynthetic() && lambdaPattern.matcher(type.getSimpleName()).matches();
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@136--->final Class defaultImplementation = super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@69--->return (Class)typeToImpl.get(type);
com.thoughtworks.xstream.io.xml.AbstractPullReader:getNodeName: LineNo@212--->return unescapeXmlName((String) elementStack.peek());
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@38--->Object cached = realClassCache.get(elementName);
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@40--->if (cached instanceof Class) {
com.thoughtworks.xstream.mapper.DefaultMapper:defaultImplementationOf: LineNo@86--->return type;
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@71--->return super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isReferenceable: LineNo@69--->if (unreferenceableTypes.contains(type)) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@53--->if (type == null) {
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@64--->return baseType == null ? super.serializedClass(type) : super.serializedClass(baseType);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@67--->references.associateId(item, new Id(newReferenceKey, currentPath));
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:back: LineNo@74--->this.myIndex -= 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@111--->if (c == 0) {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@107--->if (x.nextClean() != '[') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@321--->switch (c) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@166--->String[] chunks = new String[pointer + 1];
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@165--->if (currentPath == null) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@284--->if ( jns != null && jns.length() != 0 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@61--->if (immutableTypes.contains(type)) {
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@90--->if (Collection.class.isAssignableFrom(clazz)
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@58--->return super.serializedClass(replacement == null ? type : replacement);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@28--->if (classAttribute == null) {
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@29--->type = mapper.realClass(reader.getNodeName());
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@133--->if (!locked) {
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.io.path.PathTrackingReader:moveDown: LineNo@37--->super.moveDown();
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@102--->while (elementStack.size() <= currentDepth) {
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:createCollection: LineNo@156--->return defaultType.newInstance();
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:createCollection: LineNo@153--->ErrorWritingException ex = null;
com.thoughtworks.xstream.core.util.CompositeClassLoader:loadClass: LineNo@133--->contextClassLoader = null;
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@56--->converter = converterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@67--->return cachedConverter;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@53--->final Path currentPath = pathTracker.getPath();
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@55--->if (existingReference != null && existingReference.getPath() != currentPath) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@54--->Id existingReference = (Id)references.lookupId(item);
com.thoughtworks.xstream.io.path.Path:<init>: LineNo@99--->this.chunks = chunks;
com.thoughtworks.xstream.io.path.Path:<init>: LineNo@99--->this.chunks = chunks;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@36--->private ObjectIdDictionary references = new ObjectIdDictionary();
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@61--->return super.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@38--->if (Types.isLambdaType(type)) {
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@37--->Class<?> replacement = null;
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@63--->: existingReference.getItem();
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@66--->writeBareItem(item, context, writer);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@54--->Id existingReference = (Id)references.lookupId(item);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@55--->if (existingReference != null && existingReference.getPath() != currentPath) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@53--->final Path currentPath = pathTracker.getPath();
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@97--->return id;
com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute: LineNo@157--->return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
org.codehaus.jettison.AbstractXMLStreamReader:getAttributeValue: LineNo@103--->return (String) node.getAttributes().get(new QName(ns, local));
com.thoughtworks.xstream.io.ReaderWrapper:getAttribute: LineNo@52--->return wrapped.getAttribute(name);
com.thoughtworks.xstream.io.AbstractReader:encodeAttribute: LineNo@97--->return nameCoder.encodeAttribute(name);
com.thoughtworks.xstream.converters.collections.CollectionConverter:addCurrentElementToCollection: LineNo@98--->final Object item = readItem(reader, context, collection); // call readBareItem when deprecated method is removed
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@45--->if (parentReferenceKey != null) {
com.thoughtworks.xstream.core.util.FastStack:peek: LineNo@48--->return pointer == 0 ? null : stack[pointer - 1];
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@43--->if (parentStack.size() > 0) { // handles circular references
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@149--->for (int i = 0; i < chunks.length; i++) {
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@150--->result = 29 * result + chunks[i].hashCode();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.AbstractXMLInputFactory:<init>: LineNo@38--->private int bufSize = INPUT_BUF_SIZE;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.mapped.MappedNamespaceConvention:convertToJSONPrimitive: LineNo@307--->return typeConverter.convertToJSONPrimitive( text );
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@51--->} catch (Exception e) {/**/}
org.codehaus.jettison.json.JSONObject:quote: LineNo@1062--->return sb.toString();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@42--->if (primitive == null) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@82--->private StringBuilder object = new StringBuilder();
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@43--->convertAnother(item, null);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@61--->return super.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@38--->if (Types.isLambdaType(type)) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.io.ReaderWrapper:getNodeName: LineNo@44--->return wrapped.getNodeName();
com.thoughtworks.xstream.mapper.CachingMapper:realClass: LineNo@41--->return (Class)cached;
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@68--->if (typeToImpl.containsKey(type)) {
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isReferenceable: LineNo@72--->return super.isReferenceable(type);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@54--->final boolean isReferenceable = getMapper().isReferenceable(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@70--->types.push(type);
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@56--->if (Enum.class.isAssignableFrom(type) && type.getSuperclass() != Enum.class) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@39--->private String valueKey = MIXED_CONTENT_VALUE_KEY;
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary:associateId: LineNo@91--->map.put(new WeakIdWrapper(obj), id);
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@113--->} else if (c == ',') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@110--->char c = x.nextClean();
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@330--->return newJSONArray();
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@56--->if (javaToQName != null) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@167--->chunks[0] = '';
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@37--->Class<?> replacement = null;
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@64--->return super.isImmutableValueType(type);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@89--->if (clazz != null && out instanceof AbstractXMLStreamWriter) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@91--->|| Map.class.isAssignableFrom(clazz)
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@48--->converter = converterLookup.lookupConverterForType(item.getClass());
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@58--->convert(item, converter);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@66--->if (cachedConverter != null) {
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@65--->Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
com.thoughtworks.xstream.core.TreeMarshaller:start: LineNo@82--->convertAnother(item);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@128--->return super.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@58--->return super.serializedClass(replacement == null ? type : replacement);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@33--->return type;
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@137--->if (!locked) {
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@136--->final Class defaultImplementation = super.defaultImplementationOf(type);
com.thoughtworks.xstream.io.ReaderWrapper:moveDown: LineNo@36--->wrapped.moveDown();
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@101--->int currentDepth = elementStack.size();
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@54--->final boolean isReferenceable = getMapper().isReferenceable(type);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@55--->if (reference != null) {
com.thoughtworks.xstream.converters.collections.CollectionConverter:createCollection: LineNo@103--->return super.createCollection(this.type != null ? this.type : type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@55--->if (converter == null) {
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@61--->final Object newReferenceKey = existingReference == null
com.thoughtworks.xstream.io.path.Path:isAncestor: LineNo@209--->if (child == null || child.chunks.length < chunks.length) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@54--->Id existingReference = (Id)references.lookupId(item);
com.thoughtworks.xstream.core.util.ObjectIdDictionary:<init>: LineNo@30--->private final Map map = new HashMap();
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@58--->return super.serializedClass(replacement == null ? type : replacement);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@63--->Class baseType = (Class)implToType.get(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@36--->private ObjectIdDictionary references = new ObjectIdDictionary();
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@66--->lastPath = currentPath;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeBareItem: LineNo@94--->context.convertAnother(item);
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@96--->Object id = map.get(new IdWrapper(obj));
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@61--->final Object newReferenceKey = existingReference == null
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@54--->Id existingReference = (Id)references.lookupId(item);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@52--->final String attributeName = getMapper().aliasForSystemAttribute('reference');
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.io.xml.StaxReader:getAttribute: LineNo@88--->return in.getAttributeValue(null, encodeAttribute(name));
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeAttribute: LineNo@44--->return name;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readItem: LineNo@117--->return readBareItem(reader, context, current);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@46--->if (!values.containsKey(parentReferenceKey)) { // see AbstractCircularReferenceTest.testWeirdCircularReference()
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@44--->Object parentReferenceKey = parentStack.peek();
com.thoughtworks.xstream.io.path.Path:hashCode: LineNo@152--->return result;
com.thoughtworks.xstream.XStream:toXML: LineNo@1282--->marshal(obj, writer);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@324--->return nextString(c);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.AbstractXMLInputFactory:readAll: LineNo@175--->char[] buf = new char[bufSize];
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.AbstractXMLInputFactory:createXMLStreamReader: LineNo@165--->return createXMLStreamReader(new JSONTokener(readAll(reader)));
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@205--->if (x.nextClean() != '{') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@35--->if(text == null) return text;
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@54--->if (primitive == null) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@97--->if (!((AbstractXMLStreamWriter)out).getSerializedAsArrays().contains(key)) {
org.codehaus.jettison.AbstractXMLStreamWriter:<init>: LineNo@25--->private ArrayList<String> serializedAsArrays = new ArrayList<String>();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@39--->private String valueKey = MIXED_CONTENT_VALUE_KEY;
org.codehaus.jettison.json.JSONObject:write: LineNo@1367--->writer.write(quote(k, escapeForwardSlashAlways));
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@44--->Double v = Double.valueOf(text);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@103--->if (MIXED_CONTENT_VALUE_KEY == valueKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@102--->String strValue = getValue().toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:getValue: LineNo@87--->return object.toString();
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@47--->if (converter == null) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@284--->if ( jns != null && jns.length() != 0 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@58--->return super.serializedClass(replacement == null ? type : replacement);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@37--->Class<?> replacement = null;
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@136--->final Class defaultImplementation = super.defaultImplementationOf(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@29--->type = mapper.realClass(reader.getNodeName());
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:defaultImplementationOf: LineNo@71--->return super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@136--->final Class defaultImplementation = super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.MapperWrapper:isReferenceable: LineNo@141--->return isReferenceableMapper.isReferenceable(type);
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@58--->} else if (EnumSet.class.isAssignableFrom(type)) {
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@30--->String name = null;
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@31--->while (type.isArray()) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@82--->private StringBuilder object = new StringBuilder();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary$WeakIdWrapper:<init>: LineNo@71--->public WeakIdWrapper(Object obj) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@66--->lastPath = currentPath;
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@116--->if (c == ']') {
org.codehaus.jettison.json.JSONTokener:newJSONArray: LineNo@416--->return new JSONArray(this);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@62--->return new QName(defaultNamespace, javaClassName, defaultPrefix);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@96--->String key = convention.createKey(prefix, uri, qname.getLocalPart());
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@80--->Map indexMap = indexMapStack[pointer];
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@82--->indexMap = new HashMap();
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@80--->Map indexMap = indexMapStack[pointer];
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@82--->indexMap = new HashMap();
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@90--->if (Collection.class.isAssignableFrom(clazz)
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@91--->|| Map.class.isAssignableFrom(clazz)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@61--->if (immutableTypes.contains(type)) {
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@58--->convert(item, converter);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@192--->if (hasPrefix) {
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@74--->writeCompleteItem(item, context, writer);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@67--->return cachedConverter;
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@48--->converter = converterLookup.lookupConverterForType(item.getClass());
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@43--->convertAnother(item, null);
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@125--->if (!locked) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem: LineNo@132--->return context.convertAnother(current, type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem: LineNo@131--->Class type = HierarchicalStreams.readClassType(reader, mapper());
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@140--->return defaultImplementation;
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@54--->type = mapper.defaultImplementationOf(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@66--->return convert(parent, type, converter);
com.thoughtworks.xstream.io.xml.AbstractPullReader:moveDown: LineNo@102--->while (elementStack.size() <= currentDepth) {
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@65--->} else if (!isReferenceable) {
com.thoughtworks.xstream.converters.collections.CollectionConverter:unmarshal: LineNo@79--->Collection collection = (Collection) createCollection(context.getRequiredType());
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@56--->converter = converterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@64--->if (lastPath == null || !currentPath.isAncestor(lastPath)) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@63--->: existingReference.getItem();
com.thoughtworks.xstream.io.path.Path:isAncestor: LineNo@210--->return false;
com.thoughtworks.xstream.core.util.ObjectIdDictionary:lookupId: LineNo@96--->Object id = map.get(new IdWrapper(obj));
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@58--->convert(item, converter);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@58--->return super.serializedClass(replacement == null ? type : replacement);
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@128--->return super.serializedClass(type);
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$Id:<init>: LineNo@126--->this.item = item;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@67--->references.associateId(item, new Id(newReferenceKey, currentPath));
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$1:convertAnother: LineNo@88--->AbstractReferenceMarshaller.this.convertAnother(nextItem);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@66--->if (cachedConverter != null) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:<init>: LineNo@47--->this.obj = obj;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@64--->if (lastPath == null || !currentPath.isAncestor(lastPath)) {
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@71--->Collection collection = (Collection) source;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@53--->final String reference = attributeName == null ? null : reader.getAttribute(attributeName);
com.thoughtworks.xstream.io.ReaderWrapper:getAttribute: LineNo@52--->return wrapped.getAttribute(name);
com.thoughtworks.xstream.io.AbstractReader:encodeAttribute: LineNo@97--->return nameCoder.encodeAttribute(name);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem: LineNo@131--->Class type = HierarchicalStreams.readClassType(reader, mapper());
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@46--->if (!values.containsKey(parentReferenceKey)) { // see AbstractCircularReferenceTest.testWeirdCircularReference()
com.thoughtworks.xstream.XStream:marshal: LineNo@1309--->marshal(obj, writer, null);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@324--->return nextString(c);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@220--->StringBuilder sb = new StringBuilder();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.AbstractXMLInputFactory:readAll: LineNo@181--->return (len == 0) ? '' : new String(buf, 0, len);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@209--->c = x.nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.mapped.MappedXMLInputFactory:createXMLStreamReader: LineNo@44--->JSONObject root = createJSONObject(tokener);
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@171--->if (c == '/') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@209--->c = x.nextClean();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@205--->if (x.nextClean() != '{') {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@36--->Object primitive = null;
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@55--->if(text.trim().equalsIgnoreCase('true') || text.trim().equalsIgnoreCase('false')) {
org.codehaus.jettison.json.JSONObject:doPut: LineNo@951--->if (key == null) {
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:getValue: LineNo@87--->return object.toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@102--->String strValue = getValue().toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@103--->if (MIXED_CONTENT_VALUE_KEY == valueKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:write: LineNo@1368--->writer.write(':');
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:valueToString: LineNo@1257--->if (value == null || value.equals(null)) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@51--->} catch (Exception e) {/**/}
org.codehaus.jettison.mapped.MappedNamespaceConvention:convertToJSONPrimitive: LineNo@307--->return typeConverter.convertToJSONPrimitive( text );
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@103--->if (MIXED_CONTENT_VALUE_KEY == valueKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@102--->String strValue = getValue().toString();
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@48--->converter = converterLookup.lookupConverterForType(item.getClass());
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@56--->if (javaToQName != null) {
com.thoughtworks.xstream.io.xml.QNameMap:<init>: LineNo@33--->private String defaultNamespace = '';
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@80--->Map indexMap = indexMapStack[pointer];
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@82--->indexMap = new HashMap();
com.thoughtworks.xstream.io.path.PathTracker:<init>: LineNo@67--->indexMapStack = new Map[capacity];
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@128--->return super.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper:serializedClass: LineNo@58--->return super.serializedClass(replacement == null ? type : replacement);
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy:createMarshallingContext: LineNo@37--->return new ReferenceByXPathMarshaller(writer, converterLookup, mapper, mode);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@65--->Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@66--->if (cachedConverter != null) {
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@54--->type = mapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@140--->return defaultImplementation;
com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassType: LineNo@33--->return type;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem: LineNo@132--->return context.convertAnother(current, type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@133--->if (!locked) {
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@54--->final boolean isReferenceable = getMapper().isReferenceable(type);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@72--->localResult = super.convert(parent, type, converter);
com.thoughtworks.xstream.core.TreeUnmarshaller:getRequiredType: LineNo@107--->return (Class)types.peek();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.mapper.EnumMapper:serializedClass: LineNo@61--->return super.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@41--->if (name == null) {
org.codehaus.jettison.json.JSONObject:doPut: LineNo@951--->if (key == null) {
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@103--->if (MIXED_CONTENT_VALUE_KEY == valueKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@102--->String strValue = getValue().toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:getValue: LineNo@87--->return object.toString();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1018--->int          len = string.length();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1012--->if (string == null || string.length() == 0) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@173--->this.ignoredElements = ignoredElements;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@67--->references.associateId(item, new Id(newReferenceKey, currentPath));
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$Id:<init>: LineNo@126--->this.item = item;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONArray:<init>: LineNo@121--->if (x.nextClean() == ',') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@106--->this();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@266--->if ( ns == null || ns.length() == 0 || ignoreNamespaces )
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@95--->String uri = qname.getNamespaceURI();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@97--->if (!((AbstractXMLStreamWriter)out).getSerializedAsArrays().contains(key)) {
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@81--->if (indexMap == null) {
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@83--->indexMapStack[pointer] = indexMap;
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@81--->if (indexMap == null) {
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@83--->indexMapStack[pointer] = indexMap;
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@91--->|| Map.class.isAssignableFrom(clazz)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper:isImmutableValueType: LineNo@62--->return true;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@192--->if (hasPrefix) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@194--->} else if (hasURI) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeCompleteItem: LineNo@81--->writeItem(item, context, writer);
com.thoughtworks.xstream.core.TreeMarshaller:getMapper: LineNo@109--->return this.mapper;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@64--->String name = mapper().serializedClass(item.getClass());
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@47--->if (converter == null) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@64--->String name = mapper().serializedClass(item.getClass());
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@128--->return super.serializedClass(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@50--->return convertAnother(parent, type, null);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@43--->if (parentStack.size() > 0) { // handles circular references
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@66--->result = super.convert(parent, type, converter);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@64--->if (lastPath == null || !currentPath.isAncestor(lastPath)) {
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper:<init>: LineNo@47--->this.obj = obj;
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@71--->Collection collection = (Collection) source;
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@74--->writeCompleteItem(item, context, writer);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@125--->if (!locked) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@69--->converter.marshal(item, writer, new ReferencingMarshallingContext() {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$Id:<init>: LineNo@127--->this.path = path;
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@43--->convertAnother(item, null);
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@48--->converter = converterLookup.lookupConverterForType(item.getClass());
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@67--->return cachedConverter;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@69--->converter.marshal(item, writer, new ReferencingMarshallingContext() {
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@72--->for (Iterator iterator = collection.iterator(); iterator.hasNext();) {
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@53--->final String reference = attributeName == null ? null : reader.getAttribute(attributeName);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:mapper: LineNo@47--->return mapper;
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@52--->final String attributeName = getMapper().aliasForSystemAttribute('reference');
com.thoughtworks.xstream.XStream:marshal: LineNo@1320--->marshallingStrategy.marshal(writer, obj, converterLookup, mapper, dataHolder);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@951--->if (key == null) {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@220--->StringBuilder sb = new StringBuilder();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@258--->return sb.toString();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@222--->c = next();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@223--->switch (c) {
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@324--->return nextString(c);
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:more: LineNo@106--->return this.myIndex < this.mySource.length();
org.codehaus.jettison.json.JSONTokener:next: LineNo@118--->this.myIndex += 1;
org.codehaus.jettison.json.JSONTokener:<init>: LineNo@48--->this.mySource = s.trim();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.mapped.MappedXMLInputFactory:createJSONObject: LineNo@59--->return new JSONObject(tokener);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@224--->c = x.nextClean();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@196--->} else if (c == '#') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@210--->switch (c) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.AbstractXMLStreamWriter:isArrayKeysWithSlashAvailable: LineNo@97--->return arrayKeysWithSlashAvailable;
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@62--->primitive = text;
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@60--->if (primitive == null || !primitive.toString().equals(text)) {
org.codehaus.jettison.json.JSONObject:doPut: LineNo@954--->if (value != null) {
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@138--->public JSONPropertyObject(String key, String parentKey, JSONObject object) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@102--->String strValue = getValue().toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@103--->if (MIXED_CONTENT_VALUE_KEY == valueKey) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1372--->if (v instanceof JSONObject) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1012--->if (string == null || string.length() == 0) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1018--->int          len = string.length();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1355--->while (keys.hasNext()) {
org.codehaus.jettison.json.JSONObject:valueToString: LineNo@1260--->if (value instanceof JSONString) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@54--->if (primitive == null) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@35--->if(text == null) return text;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@104--->strValue = strValue.trim();
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1025--->switch (c) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1024--->c = string.charAt(i);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@96--->String key = convention.createKey(prefix, uri, qname.getLocalPart());
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@62--->return new QName(defaultNamespace, javaClassName, defaultPrefix);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@81--->if (indexMap == null) {
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@83--->indexMapStack[pointer] = indexMap;
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@125--->if (!locked) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:marshal: LineNo@36--->TreeMarshaller context = createMarshallingContext(writer, converterLookup, mapper);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@67--->return cachedConverter;
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@56--->converter = converterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem: LineNo@131--->Class type = HierarchicalStreams.readClassType(reader, mapper());
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@50--->return convertAnother(parent, type, null);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@91--->currentPath = null;
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@136--->final Class defaultImplementation = super.defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@137--->if (!locked) {
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@65--->} else if (!isReferenceable) {
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@72--->return converter.unmarshal(reader, this);
com.thoughtworks.xstream.converters.collections.CollectionConverter:unmarshal: LineNo@79--->Collection collection = (Collection) createCollection(context.getRequiredType());
com.thoughtworks.xstream.core.util.FastStack:peek: LineNo@48--->return pointer == 0 ? null : stack[pointer - 1];
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@38--->private PathTracker pathTracker = new PathTracker();
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass: LineNo@42--->name = boxedTypeName(type);
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@954--->if (value != null) {
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@103--->if (MIXED_CONTENT_VALUE_KEY == valueKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@102--->String strValue = getValue().toString();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1019--->StringBuilder sb = new StringBuilder(len + 4);
com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:marshal: LineNo@37--->context.start(obj, dataHolder);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$Id:<init>: LineNo@127--->this.path = path;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@69--->converter.marshal(item, writer, new ReferencingMarshallingContext() {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONArray:<init>: LineNo@121--->if (x.nextClean() == ',') {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@89--->this.myArrayList = new ArrayList();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@267--->return '';
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@96--->String key = convention.createKey(prefix, uri, qname.getLocalPart());
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@91--->currentPath = null;
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@266--->if ( ns == null || ns.length() == 0 || ignoreNamespaces )
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@103--->startNode(name);
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@85--->if (indexMap.containsKey(name)) {
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@85--->if (indexMap.containsKey(name)) {
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@65--->Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@53--->final Path currentPath = pathTracker.getPath();
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@92--->|| clazz.isArray()) {
com.thoughtworks.xstream.mapper.MapperWrapper:isImmutableValueType: LineNo@137--->return isImmutableValueTypeMapper.isImmutableValueType(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.core.TreeMarshaller:getMapper: LineNo@109--->return this.mapper;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@192--->if (hasPrefix) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@194--->} else if (hasURI) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@199--->if (hasURI && writeNamespace && !isNamespaceRepairingMode()) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@65--->ExtendedHierarchicalStreamWriterHelper.startNode(writer, name, item.getClass());
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@60--->if (item == null) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:mapper: LineNo@47--->return mapper;
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@48--->converter = converterLookup.lookupConverterForType(item.getClass());
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@54--->type = mapper.defaultImplementationOf(type);
com.thoughtworks.xstream.core.util.FastStack:size: LineNo@62--->return pointer;
com.thoughtworks.xstream.core.TreeUnmarshaller:convert: LineNo@70--->types.push(type);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@69--->converter.marshal(item, writer, new ReferencingMarshallingContext() {
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@72--->for (Iterator iterator = collection.iterator(); iterator.hasNext();) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeCompleteItem: LineNo@81--->writeItem(item, context, writer);
com.thoughtworks.xstream.core.TreeMarshaller:getMapper: LineNo@109--->return this.mapper;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@64--->String name = mapper().serializedClass(item.getClass());
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@128--->return super.serializedClass(type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@64--->String name = mapper().serializedClass(item.getClass());
com.thoughtworks.xstream.core.TreeMarshaller:<init>: LineNo@38--->this.converterLookup = converterLookup;
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$1:<init>: LineNo@69--->converter.marshal(item, writer, new ReferencingMarshallingContext() {
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@47--->if (converter == null) {
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@73--->Object item = iterator.next();
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createWriter: LineNo@145--->return new JettisonStaxWriter(new QNameMap(), mof.createXMLStreamWriter(writer), getNameCoder(), convention);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@54--->final boolean isReferenceable = getMapper().isReferenceable(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:getMapper: LineNo@144--->return this.mapper;
com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:marshal: LineNo@36--->TreeMarshaller context = createMarshallingContext(writer, converterLookup, mapper);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@954--->if (value != null) {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONTokener:<init>: LineNo@39--->private int threshold = -1;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@232--->doPut(key, x.nextValue(), x.getThreshold(), true);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@258--->return sb.toString();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@324--->return nextString(c);
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@257--->if (c == quote) {
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@220--->StringBuilder sb = new StringBuilder();
org.codehaus.jettison.json.JSONTokener:next: LineNo@116--->if (more()) {
org.codehaus.jettison.json.JSONTokener:next: LineNo@117--->char c = this.mySource.charAt(this.myIndex);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@217--->key = x.nextValue().toString();
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@205--->if (x.nextClean() != '{') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@170--->char c = next();
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@200--->} else if (c == 0 || c > ' ') {
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@217--->key = x.nextValue().toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@65--->return primitive;
org.codehaus.jettison.json.JSONObject:doPut: LineNo@956--->if (!checkExistingValue || !this.myHashMap.containsKey(key)) {
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:isEscapeForwardSlashAlways: LineNo@332--->return escapeForwardSlashAlways;
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@147--->out.writeEndElement();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@139--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@104--->strValue = strValue.trim();
org.codehaus.jettison.json.JSONObject:write: LineNo@1362--->boolean mayBeDropSimpleElement = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1374--->} else if (v instanceof JSONArray) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1366--->if (!mayBeDropSimpleElement) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1019--->StringBuilder sb = new StringBuilder(len + 4);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1356--->if (b) {
org.codehaus.jettison.json.JSONObject:valueToString: LineNo@1272--->if (value instanceof Number) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@55--->if(text.trim().equalsIgnoreCase('true') || text.trim().equalsIgnoreCase('false')) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@36--->Object primitive = null;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@106--->if (strValue.length() > 0) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@82--->private StringBuilder object = new StringBuilder();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@97--->convention.getIgnoredElements(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@97--->convention.getIgnoredElements(),
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@65--->Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@98--->convention.isWriteNullAsString(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@111--->boolean emptyString = value instanceof String && ((String)value).isEmpty();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1053--->if (c < ' ') {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1018--->int          len = string.length();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1012--->if (string == null || string.length() == 0) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@97--->if (!((AbstractXMLStreamWriter)out).getSerializedAsArrays().contains(key)) {
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@266--->if ( ns == null || ns.length() == 0 || ignoreNamespaces )
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@95--->String uri = qname.getNamespaceURI();
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@85--->if (indexMap.containsKey(name)) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@44--->super(writer, converterLookup, mapper);
com.thoughtworks.xstream.core.TreeMarshaller:start: LineNo@80--->ExtendedHierarchicalStreamWriterHelper.startNode(writer, mapper
com.thoughtworks.xstream.core.TreeMarshaller:<init>: LineNo@39--->this.mapper = mapper;
com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass: LineNo@128--->return super.serializedClass(type);
com.thoughtworks.xstream.core.TreeMarshaller:start: LineNo@81--->.serializedClass(item.getClass()), item.getClass());
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@54--->type = mapper.defaultImplementationOf(type);
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@55--->if (converter == null) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:createCollection: LineNo@154--->Class defaultType = mapper().defaultImplementationOf(type);
com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf: LineNo@140--->return defaultImplementation;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:createCollection: LineNo@154--->Class defaultType = mapper().defaultImplementationOf(type);
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert: LineNo@70--->Object localResult = null;
com.thoughtworks.xstream.converters.collections.CollectionConverter:unmarshal: LineNo@79--->Collection collection = (Collection) createCollection(context.getRequiredType());
com.thoughtworks.xstream.core.TreeUnmarshaller:getRequiredType: LineNo@107--->return (Class)types.peek();
com.thoughtworks.xstream.io.path.PathTracker:<init>: LineNo@56--->this(16);
com.thoughtworks.xstream.io.path.PathTracker:<init>: LineNo@65--->this.capacity = Math.max(1, initialCapacity);
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:serializedClass: LineNo@63--->Class baseType = (Class)implToType.get(type);
com.thoughtworks.xstream.mapper.ArrayMapper:boxedTypeName: LineNo@93--->return Primitives.isBoxed(type) ? type.getName() : null;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@956--->if (!checkExistingValue || !this.myHashMap.containsKey(key)) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@89--->if (clazz != null && out instanceof AbstractXMLStreamWriter) {
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@90--->pointer++;
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@76--->if (pointer + 1 >= capacity) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@104--->strValue = strValue.trim();
org.codehaus.jettison.json.JSONObject:quote: LineNo@1062--->return sb.toString();
com.thoughtworks.xstream.core.TreeMarshaller:start: LineNo@76--->if (item == null) {
com.thoughtworks.xstream.core.AbstractReferenceMarshaller$1:<init>: LineNo@69--->converter.marshal(item, writer, new ReferencingMarshallingContext() {
com.thoughtworks.xstream.io.xml.StaxWriter:<init>: LineNo@70--->super(nameCoder);
com.thoughtworks.xstream.core.util.Cloneables:cloneIfPossible: LineNo@59--->Object clone = clone(o);
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONArray:<init>: LineNo@129--->this.myArrayList.add(x.nextValue());
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@173--->boolean hasPrefix = prefix != null && prefix.length() > 0;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@56--->if (javaToQName != null) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@284--->if ( jns != null && jns.length() != 0 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@267--->return '';
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@266--->if ( ns == null || ns.length() == 0 || ignoreNamespaces )
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@76--->if (pointer + 1 >= capacity) {
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@90--->pointer++;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@91--->currentPath = null;
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@165--->if (currentPath == null) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@166--->String[] chunks = new String[pointer + 1];
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@103--->startNode(name);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:convert: LineNo@49--->if (getMapper().isImmutableValueType(item.getClass())) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@194--->} else if (hasURI) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@199--->if (hasURI && writeNamespace && !isNamespaceRepairingMode()) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@206--->tagDepth++ ;
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:startNode: LineNo@23--->if (writer instanceof ExtendedHierarchicalStreamWriter) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@64--->String name = mapper().serializedClass(item.getClass());
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@33--->stack[pointer++] = value;
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@30--->if (pointer + 1 >= stack.length) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@65--->ExtendedHierarchicalStreamWriterHelper.startNode(writer, name, item.getClass());
com.thoughtworks.xstream.converters.collections.CollectionConverter:marshal: LineNo@73--->Object item = iterator.next();
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@60--->if (item == null) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:mapper: LineNo@47--->return mapper;
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
com.thoughtworks.xstream.core.TreeMarshaller:convertAnother: LineNo@48--->converter = converterLookup.lookupConverterForType(item.getClass());
com.thoughtworks.xstream.XStream:toXML: LineNo@1280--->HierarchicalStreamWriter writer = hierarchicalStreamDriver.createWriter(out);
com.thoughtworks.xstream.core.TreeUnmarshaller:getMapper: LineNo@144--->return this.mapper;
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy:createMarshallingContext: LineNo@37--->return new ReferenceByXPathMarshaller(writer, converterLookup, mapper, mode);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@956--->if (!checkExistingValue || !this.myHashMap.containsKey(key)) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:isIgnoreEmptyArrayValues: LineNo@327--->return ignoreEmptyArrayValues;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@117--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.json.JSONObject:<init>: LineNo@232--->doPut(key, x.nextValue(), x.getThreshold(), true);
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@318--->char c = nextClean();
org.codehaus.jettison.json.JSONTokener:getThreshold: LineNo@64--->return threshold;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@324--->return nextString(c);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@217--->key = x.nextValue().toString();
org.codehaus.jettison.json.JSONTokener:nextString: LineNo@258--->return sb.toString();
org.codehaus.jettison.json.JSONTokener:next: LineNo@119--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@321--->switch (c) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@209--->c = x.nextClean();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@205--->if (x.nextClean() != '{') {
org.codehaus.jettison.json.JSONTokener:nextClean: LineNo@201--->return c;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@321--->switch (c) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@113--->value = convention.convertToJSONPrimitive((String)value);
org.codehaus.jettison.mapped.MappedNamespaceConvention:convertToJSONPrimitive: LineNo@307--->return typeConverter.convertToJSONPrimitive( text );
org.codehaus.jettison.json.JSONObject:doPut: LineNo@958--->if (threshold > 0 && myHashMap.size() >= threshold) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@239--->convention.getIgnoredElements(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@238--->new JSONObject(convention.isDropRootElement(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@236--->current = new JSONPropertyObject(null,
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@240--->convention.isWriteNullAsString(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@274--->if (stack.isEmpty()) throw new XMLStreamException('Too many closing tags.');
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@147--->out.writeEndElement();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@44--->super.startNode(name, clazz);
com.thoughtworks.xstream.XStream$1:lookupConverterForType: LineNo@517--->return defaultConverterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.XStream:setupDefaultSecurity: LineNo@793--->classes[i] = (Class)iter.next();
com.thoughtworks.xstream.io.xml.StaxWriter:getXMLStreamWriter: LineNo@224--->return this.out;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@106--->if (strValue.length() > 0) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1363--->if (!dropObjectKeyName) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1376--->} else if (!mayBeDropSimpleElement) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1367--->writer.write(quote(k, escapeForwardSlashAlways));
org.codehaus.jettison.json.JSONObject:quote: LineNo@1062--->return sb.toString();
org.codehaus.jettison.json.JSONObject:write: LineNo@1359--->String k = keys.next().toString();
org.codehaus.jettison.json.JSONObject:valueToString: LineNo@1275--->if (value instanceof Boolean || value instanceof JSONObject ||
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.AbstractXMLStreamWriter:isArrayKeysWithSlashAvailable: LineNo@97--->return arrayKeysWithSlashAvailable;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@60--->if (primitive == null || !primitive.toString().equals(text)) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@62--->primitive = text;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@110--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:getValue: LineNo@87--->return object.toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@98--->convention.isWriteNullAsString(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedNamespaceConvention:getIgnoredElements: LineNo@317--->return ignoredElements;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isWriteNullAsString: LineNo@320--->return writeNullAsString;
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@67--->writer.endNode();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@112--->if (value instanceof String && !emptyString) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1023--->for (i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:quote: LineNo@1019--->StringBuilder sb = new StringBuilder(len + 4);
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@266--->if ( ns == null || ns.length() == 0 || ignoreNamespaces )
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@103--->startNode(name);
com.thoughtworks.xstream.core.util.Cloneables:cloneIfPossible: LineNo@60--->return clone == null ? o : clone;
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:<init>: LineNo@84--->this.convention = convention;
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@267--->return '';
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@96--->String key = convention.createKey(prefix, uri, qname.getLocalPart());
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@91--->currentPath = null;
com.thoughtworks.xstream.core.TreeMarshaller:<init>: LineNo@37--->this.writer = writer;
com.thoughtworks.xstream.io.path.PathTrackingWriter:<init>: LineNo@32--->super(writer);
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:startNode: LineNo@23--->if (writer instanceof ExtendedHierarchicalStreamWriter) {
com.thoughtworks.xstream.mapper.MapperWrapper:serializedClass: LineNo@121--->return serializedClassMapper.serializedClass(type);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@138--->public JSONPropertyObject(String key, String parentKey, JSONObject object) {
com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother: LineNo@56--->converter = converterLookup.lookupConverterForType(type);
com.thoughtworks.xstream.mapper.MapperWrapper:defaultImplementationOf: LineNo@145--->return defaultImplementationOfMapper.defaultImplementationOf(type);
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:mapper: LineNo@47--->return mapper;
com.thoughtworks.xstream.converters.collections.CollectionConverter:createCollection: LineNo@103--->return super.createCollection(this.type != null ? this.type : type);
com.thoughtworks.xstream.io.path.PathTracker:<init>: LineNo@66--->pathStack = new String[capacity];
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@76--->if (pointer + 1 >= capacity) {
com.thoughtworks.xstream.core.util.Primitives:isBoxed: LineNo@89--->return UNBOX.containsKey(type);
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@958--->if (threshold > 0 && myHashMap.size() >= threshold) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@90--->if (Collection.class.isAssignableFrom(clazz)
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@207--->super();
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@89--->if (clazz != null && out instanceof AbstractXMLStreamWriter) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@89--->if (clazz != null && out instanceof AbstractXMLStreamWriter) {
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@44--->super.startNode(name, clazz);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@79--->pathStack[pointer] = name;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@106--->if (strValue.length() > 0) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1367--->writer.write(quote(k, escapeForwardSlashAlways));
com.thoughtworks.xstream.core.TreeMarshaller:start: LineNo@83--->writer.endNode();
com.thoughtworks.xstream.io.xml.AbstractXmlWriter:<init>: LineNo@40--->super(nameCoder);
com.thoughtworks.xstream.core.util.Cloneables:clone: LineNo@28--->if (o instanceof Cloneable) {
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@321--->switch (c) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@174--->boolean hasURI = uri != null && uri.length() > 0;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@175--->boolean writeNamespace = false;
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@62--->return new QName(defaultNamespace, javaClassName, defaultPrefix);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@167--->String prefix = qname.getPrefix();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getTreeKey: LineNo@65--->return parentKey == null ? key : parentKey + '/' + key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@284--->if ( jns != null && jns.length() != 0 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@267--->return '';
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@173--->boolean hasPrefix = prefix != null && prefix.length() > 0;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@79--->pathStack[pointer] = name;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@44--->super.startNode(name, clazz);
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@56--->if (javaToQName != null) {
com.thoughtworks.xstream.io.path.PathTracker:getPath: LineNo@167--->chunks[0] = '';
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@67--->writer.endNode();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@199--->if (hasURI && writeNamespace && !isNamespaceRepairingMode()) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@206--->tagDepth++ ;
com.thoughtworks.xstream.io.path.PathTrackingWriter:endNode: LineNo@48--->super.endNode();
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:startNode: LineNo@24--->((ExtendedHierarchicalStreamWriter)writer).startNode(name, clazz);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@45--->this.writer = new PathTrackingWriter(writer, pathTracker);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@38--->private PathTracker pathTracker = new PathTracker();
com.thoughtworks.xstream.core.util.FastStack:push: LineNo@34--->return value;
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:startNode: LineNo@23--->if (writer instanceof ExtendedHierarchicalStreamWriter) {
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem: LineNo@64--->String name = mapper().serializedClass(item.getClass());
com.thoughtworks.xstream.core.ReferenceByXPathMarshaller:<init>: LineNo@24--->super(writer, converterLookup, mapper);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@958--->if (threshold > 0 && myHashMap.size() >= threshold) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1362--->boolean mayBeDropSimpleElement = false;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@117--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.json.JSONTokener:newJSONArray: LineNo@416--->return new JSONArray(this);
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@321--->switch (c) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@232--->doPut(key, x.nextValue(), x.getThreshold(), true);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@232--->doPut(key, x.nextValue(), x.getThreshold(), true);
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@324--->return nextString(c);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@210--->switch (c) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@224--->c = x.nextClean();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@225--->if (c == '=') {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@113--->value = convention.convertToJSONPrimitive((String)value);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@977--->return this;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedNamespaceConvention:getIgnoredElements: LineNo@317--->return ignoredElements;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isDropRootElement: LineNo@314--->return dropRootElement;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isWriteNullAsString: LineNo@320--->return writeNullAsString;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@167--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@140--->this.object = object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@274--->if (stack.isEmpty()) throw new XMLStreamException('Too many closing tags.');
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getTreeKey: LineNo@65--->return parentKey == null ? key : parentKey + '/' + key;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.WriterWrapper:startNode: LineNo@33--->((ExtendedHierarchicalStreamWriter) wrapped).startNode(name, clazz);
com.thoughtworks.xstream.io.xml.StaxWriter:getXMLStreamWriter: LineNo@224--->return this.out;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType: LineNo@65--->Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@97--->convention.getIgnoredElements(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@98--->convention.isWriteNullAsString(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@97--->convention.getIgnoredElements(),
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getTreeKey: LineNo@65--->return parentKey == null ? key : parentKey + '/' + key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@84--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@83--->public JSONPropertyString(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:getValue: LineNo@87--->return object.toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@110--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.json.JSONObject:write: LineNo@1364--->mayBeDropSimpleElement = hashMapSize > 1
org.codehaus.jettison.json.JSONObject:write: LineNo@1377--->writer.write(valueToString(v, escapeForwardSlashAlways));
org.codehaus.jettison.json.JSONObject:valueToString: LineNo@1279--->return quote(value.toString(), escapeForwardSlash);
org.codehaus.jettison.json.JSONObject:write: LineNo@1360--->Object v = this.myHashMap.get(k);
org.codehaus.jettison.json.JSONObject:valueToString: LineNo@1279--->return quote(value.toString(), escapeForwardSlash);
org.codehaus.jettison.json.JSONObject:write: LineNo@1348--->if (!dropObjectKeyName) {
org.codehaus.jettison.json.JSONArray:write: LineNo@898--->if (v instanceof JSONObject) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.DefaultConverter:convertToJSONPrimitive: LineNo@65--->return primitive;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@110--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
com.thoughtworks.xstream.io.path.PathTrackingWriter:endNode: LineNo@49--->pathTracker.popElement();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@113--->value = convention.convertToJSONPrimitive((String)value);
org.codehaus.jettison.json.JSONObject:quote: LineNo@1062--->return sb.toString();
org.codehaus.jettison.mapped.MappedNamespaceConvention:getJSONNamespace: LineNo@267--->return '';
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@284--->if ( jns != null && jns.length() != 0 ) {
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@281--->StringBuilder builder = new StringBuilder();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@139--->super(key, parentKey);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@93--->QName qname = getQNameMap().getQName(encodeNode(name));
com.thoughtworks.xstream.io.xml.StaxWriter:<init>: LineNo@71--->this.qnameMap = qnameMap;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.AbstractWriter:<init>: LineNo@46--->this.nameCoder = (NameCoder)Cloneables.cloneIfPossible(nameCoder);
com.thoughtworks.xstream.io.naming.NoNameCoder:encodeNode: LineNo@51--->return name;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@56--->if (javaToQName != null) {
com.thoughtworks.xstream.io.WriterWrapper:<init>: LineNo@24--->this.wrapped = wrapped;
com.thoughtworks.xstream.io.path.PathTrackingWriter:<init>: LineNo@33--->this.isNameEncoding = writer.underlyingWriter() instanceof AbstractWriter;
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:startNode: LineNo@24--->((ExtendedHierarchicalStreamWriter)writer).startNode(name, clazz);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:createCollection: LineNo@154--->Class defaultType = mapper().defaultImplementationOf(type);
com.thoughtworks.xstream.io.path.PathTracker:pushElement: LineNo@79--->pathStack[pointer] = name;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@44--->super.startNode(name, clazz);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@173--->boolean hasPrefix = prefix != null && prefix.length() > 0;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:doPut: LineNo@977--->return this;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@97--->if (!((AbstractXMLStreamWriter)out).getSerializedAsArrays().contains(key)) {
org.codehaus.jettison.AbstractXMLStreamWriter:<init>: LineNo@25--->private ArrayList<String> serializedAsArrays = new ArrayList<String>();
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@90--->if (Collection.class.isAssignableFrom(clazz)
com.thoughtworks.xstream.io.WriterWrapper:startNode: LineNo@33--->((ExtendedHierarchicalStreamWriter) wrapped).startNode(name, clazz);
com.thoughtworks.xstream.io.xml.StaxWriter:getXMLStreamWriter: LineNo@224--->return this.out;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@110--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:getValue: LineNo@143--->return object;
org.codehaus.jettison.json.JSONObject:write: LineNo@1368--->writer.write(':');
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:doPut: LineNo@951--->if (key == null) {
com.thoughtworks.xstream.io.path.PathTrackingWriter:endNode: LineNo@48--->super.endNode();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@193--->object.put(property.getKey(), values);
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createWriter: LineNo@145--->return new JettisonStaxWriter(new QNameMap(), mof.createXMLStreamWriter(writer), getNameCoder(), convention);
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createWriter: LineNo@145--->return new JettisonStaxWriter(new QNameMap(), mof.createXMLStreamWriter(writer), getNameCoder(), convention);
com.thoughtworks.xstream.io.AbstractWriter:<init>: LineNo@46--->this.nameCoder = (NameCoder)Cloneables.cloneIfPossible(nameCoder);
com.thoughtworks.xstream.core.util.Cloneables:clone: LineNo@55--->return null;
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@327--->return newJSONObject();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@177--->if (hasURI) {
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@168--->String uri = qname.getNamespaceURI();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@83--->public JSONPropertyString(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@84--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getTreeKey: LineNo@65--->return parentKey == null ? key : parentKey + '/' + key;
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@175--->boolean writeNamespace = false;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@174--->boolean hasURI = uri != null && uri.length() > 0;
com.thoughtworks.xstream.io.xml.StaxWriter:getXMLStreamWriter: LineNo@224--->return this.out;
com.thoughtworks.xstream.io.WriterWrapper:startNode: LineNo@33--->((ExtendedHierarchicalStreamWriter) wrapped).startNode(name, clazz);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@167--->String prefix = qname.getPrefix();
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@62--->return new QName(defaultNamespace, javaClassName, defaultPrefix);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.xml.StaxWriter:getQNameMap: LineNo@220--->return this.qnameMap;
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
com.thoughtworks.xstream.io.path.PathTrackingWriter:endNode: LineNo@48--->super.endNode();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@206--->tagDepth++ ;
com.thoughtworks.xstream.io.WriterWrapper:endNode: LineNo@37--->wrapped.endNode();
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.path.PathTrackingWriter:<init>: LineNo@33--->this.isNameEncoding = writer.underlyingWriter() instanceof AbstractWriter;
com.thoughtworks.xstream.io.path.PathTrackingWriter:<init>: LineNo@34--->this.pathTracker = pathTracker;
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper:startNode: LineNo@24--->((ExtendedHierarchicalStreamWriter)writer).startNode(name, clazz);
com.thoughtworks.xstream.core.AbstractReferenceMarshaller:<init>: LineNo@45--->this.writer = new PathTrackingWriter(writer, pathTracker);
org.codehaus.jettison.json.JSONObject:doPut: LineNo@977--->return this;
org.codehaus.jettison.json.JSONObject:write: LineNo@1363--->if (!dropObjectKeyName) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@116--->JSONArray values = new JSONArray();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@119--->values.put(value);
org.codehaus.jettison.json.JSONTokener:nextValue: LineNo@330--->return newJSONArray();
org.codehaus.jettison.json.JSONTokener:getThreshold: LineNo@64--->return threshold;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@217--->key = x.nextValue().toString();
org.codehaus.jettison.json.JSONObject:<init>: LineNo@229--->} else if (c != ':') {
com.thoughtworks.xstream.XStream:toXML: LineNo@1269--->toXML(obj, writer);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getParentKey: LineNo@62--->return parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@128--->}
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:getValue: LineNo@143--->return object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedNamespaceConvention:getIgnoredElements: LineNo@317--->return ignoredElements;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isWriteNullAsString: LineNo@320--->return writeNullAsString;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@98--->convention.isWriteNullAsString(),
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@111--->boolean emptyString = value instanceof String && ((String)value).isEmpty();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@110--->Object value = property.getValue();
org.codehaus.jettison.json.JSONObject:write: LineNo@1365--->&& ignoredElements != null && ignoredElements.contains(k);
org.codehaus.jettison.json.JSONObject:write: LineNo@1377--->writer.write(valueToString(v, escapeForwardSlashAlways));
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.json.JSONObject:write: LineNo@1349--->writer.write('{');
org.codehaus.jettison.json.JSONArray:write: LineNo@899--->((JSONObject)v).write(writer);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedNamespaceConvention:convertToJSONPrimitive: LineNo@307--->return typeConverter.convertToJSONPrimitive( text );
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@113--->value = convention.convertToJSONPrimitive((String)value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedNamespaceConvention:isEscapeForwardSlashAlways: LineNo@332--->return escapeForwardSlashAlways;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@97--->convention.getIgnoredElements(),
com.thoughtworks.xstream.io.path.PathTracker:popElement: LineNo@100--->currentPath = null;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@98--->convention.isWriteNullAsString(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@97--->convention.getIgnoredElements(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:write: LineNo@1367--->writer.write(quote(k, escapeForwardSlashAlways));
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@282--->String jns = getJSONNamespace(p, ns);
org.codehaus.jettison.mapped.MappedNamespaceConvention:createKey: LineNo@287--->return builder.append( local ).toString();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.xml.StaxWriter:getQNameMap: LineNo@220--->return this.qnameMap;
com.thoughtworks.xstream.io.AbstractWriter:encodeNode: LineNo@71--->return nameCoder.encodeNode(name);
com.thoughtworks.xstream.io.xml.QNameMap:getQName: LineNo@62--->return new QName(defaultNamespace, javaClassName, defaultPrefix);
com.thoughtworks.xstream.io.AbstractWriter:underlyingWriter: LineNo@60--->return this;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@167--->String prefix = qname.getPrefix();
com.thoughtworks.xstream.io.xml.StaxWriter:getXMLStreamWriter: LineNo@224--->return this.out;
com.thoughtworks.xstream.io.WriterWrapper:startNode: LineNo@33--->((ExtendedHierarchicalStreamWriter) wrapped).startNode(name, clazz);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@175--->boolean writeNamespace = false;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@174--->boolean hasURI = uri != null && uri.length() > 0;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@97--->if (!((AbstractXMLStreamWriter)out).getSerializedAsArrays().contains(key)) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@110--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@111--->boolean emptyString = value instanceof String && ((String)value).isEmpty();
org.codehaus.jettison.json.JSONObject:write: LineNo@1372--->if (v instanceof JSONObject) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1362--->boolean mayBeDropSimpleElement = false;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@173--->if(old != null) {
org.codehaus.jettison.json.JSONObject:doPut: LineNo@954--->if (value != null) {
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@147--->out.writeEndElement();
com.thoughtworks.xstream.io.WriterWrapper:endNode: LineNo@37--->wrapped.endNode();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@194--->} else {
com.thoughtworks.xstream.io.AbstractDriver:getNameCoder: LineNo@53--->return replacer;
com.thoughtworks.xstream.io.json.JettisonStaxWriter:<init>: LineNo@83--->super(qnameMap, out, nameCoder);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@240--->convention.isWriteNullAsString(),
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@239--->convention.getIgnoredElements(),
com.thoughtworks.xstream.core.util.Cloneables:cloneIfPossible: LineNo@59--->Object clone = clone(o);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@238--->new JSONObject(convention.isDropRootElement(),
org.codehaus.jettison.json.JSONTokener:newJSONObject: LineNo@412--->return new JSONObject(this);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@128--->}
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@140--->this.object = object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@177--->if (hasURI) {
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@168--->String uri = qname.getNamespaceURI();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@83--->public JSONPropertyString(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@84--->super(key, parentKey);
com.thoughtworks.xstream.io.WriterWrapper:endNode: LineNo@37--->wrapped.endNode();
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@146--->tagDepth-- ;
com.thoughtworks.xstream.io.AbstractWriter:underlyingWriter: LineNo@60--->return this;
com.thoughtworks.xstream.io.path.PathTrackingWriter:startNode: LineNo@43--->pathTracker.pushElement(isNameEncoding ? ((AbstractWriter)wrapped.underlyingWriter()).encodeNode(name) : name);
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.json.JSONObject:write: LineNo@1364--->mayBeDropSimpleElement = hashMapSize > 1
org.codehaus.jettison.json.JSONArray:write: LineNo@898--->if (v instanceof JSONObject) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@117--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@188--->boolean emptyString = value instanceof String && ((String)value).isEmpty();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.json.JSONArray:put: LineNo@634--->return this;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@119--->values.put(value);
org.codehaus.jettison.json.JSONObject:<init>: LineNo@232--->doPut(key, x.nextValue(), x.getThreshold(), true);
com.thoughtworks.xstream.XStream:toXML: LineNo@1280--->HierarchicalStreamWriter writer = hierarchicalStreamDriver.createWriter(out);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isEscapeForwardSlashAlways: LineNo@332--->return escapeForwardSlashAlways;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@167--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@84--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@83--->public JSONPropertyString(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@112--->if (value instanceof String && !emptyString) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1379--->if (!mayBeDropSimpleElement) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@171--->this.myHashMap = new LinkedHashMap();
org.codehaus.jettison.json.JSONObject:write: LineNo@1352--->boolean  b = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1342--->boolean dropObjectKeyName = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1340--->int hashMapSize = this.myHashMap.size();
org.codehaus.jettison.json.JSONObject:write: LineNo@1366--->if (!mayBeDropSimpleElement) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@113--->value = convention.convertToJSONPrimitive((String)value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedNamespaceConvention:getIgnoredElements: LineNo@317--->return ignoredElements;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isWriteNullAsString: LineNo@320--->return writeNullAsString;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@98--->convention.isWriteNullAsString(),
org.codehaus.jettison.json.JSONObject:write: LineNo@1348--->if (!dropObjectKeyName) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1368--->writer.write(':');
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@83--->public JSONPropertyString(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:<init>: LineNo@84--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@248--->String key = convention.createKey(prefix, ns, local);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getTreeKey: LineNo@65--->return parentKey == null ? key : parentKey + '/' + key;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@166--->QName qname = qnameMap.getQName(encodeNode(name));
com.thoughtworks.xstream.io.AbstractWriter:underlyingWriter: LineNo@60--->return this;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@168--->String uri = qname.getNamespaceURI();
com.thoughtworks.xstream.io.json.JettisonStaxWriter:startNode: LineNo@88--->XMLStreamWriter out = getXMLStreamWriter();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@177--->if (hasURI) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.AbstractXMLStreamWriter:isArrayKeysWithSlashAvailable: LineNo@97--->return arrayKeysWithSlashAvailable;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getParentKey: LineNo@62--->return parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@112--->if (value instanceof String && !emptyString) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1355--->while (keys.hasNext()) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1374--->} else if (v instanceof JSONArray) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1363--->if (!dropObjectKeyName) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndDocument: LineNo@281--->writeJSONObject((JSONObject)current.getValue());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.AbstractXMLStreamWriter:isArrayKeysWithSlashAvailable: LineNo@97--->return arrayKeysWithSlashAvailable;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@186--->} else if(getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.json.JSONObject:doPut: LineNo@956--->if (!checkExistingValue || !this.myHashMap.containsKey(key)) {
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@148--->if (tagDepth == 0 && writeEnclosingDocument) {
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@146--->tagDepth-- ;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@201--->}
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@167--->Object value = property.getValue();
com.thoughtworks.xstream.io.xml.StaxWriter:<init>: LineNo@52--->this(qnameMap, out, true, true, nameCoder);
org.codehaus.jettison.mapped.MappedXMLOutputFactory:createXMLStreamWriter: LineNo@40--->return new MappedXMLStreamWriter(convention, writer);
org.codehaus.jettison.mapped.MappedNamespaceConvention:isWriteNullAsString: LineNo@320--->return writeNullAsString;
org.codehaus.jettison.mapped.MappedNamespaceConvention:getIgnoredElements: LineNo@317--->return ignoredElements;
org.codehaus.jettison.mapped.MappedNamespaceConvention:isDropRootElement: LineNo@314--->return dropRootElement;
org.codehaus.jettison.json.JSONObject:<init>: LineNo@201--->this();
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@208--->this.convention = convention;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@128--->}
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@140--->this.object = object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getParentKey: LineNo@62--->return parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@55--->this.parentKey = parentKey;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@147--->out.writeEndElement();
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@146--->tagDepth-- ;
com.thoughtworks.xstream.io.AbstractWriter:underlyingWriter: LineNo@60--->return this;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.json.JSONObject:write: LineNo@1365--->&& ignoredElements != null && ignoredElements.contains(k);
org.codehaus.jettison.json.JSONObject:write: LineNo@1375--->((JSONArray)v).write(writer);
org.codehaus.jettison.json.JSONArray:write: LineNo@899--->((JSONObject)v).write(writer);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@189--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@124--->jo.put(property.getKey(), value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@121--->value = values;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.json.JSONArray:write: LineNo@894--->if (b) {
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createWriter: LineNo@144--->if (useSerializeAsArray) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@138--->public JSONPropertyObject(String key, String parentKey, JSONObject object) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@139--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@188--->boolean emptyString = value instanceof String && ((String)value).isEmpty();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@113--->value = convention.convertToJSONPrimitive((String)value);
org.codehaus.jettison.json.JSONObject:write: LineNo@1380--->b = true;
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.json.JSONObject:write: LineNo@1354--->Iterator keys = keys();
org.codehaus.jettison.json.JSONObject:write: LineNo@1343--->if (hashMapSize == 1) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1367--->writer.write(quote(k, escapeForwardSlashAlways));
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:write: LineNo@1349--->writer.write('{');
org.codehaus.jettison.json.JSONObject:write: LineNo@1372--->if (v instanceof JSONObject) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@246--->String parentKey = current.getTreeKey();
com.thoughtworks.xstream.io.xml.StaxWriter:startNode: LineNo@191--->out.writeStartElement(prefix, qname.getLocalPart(), uri);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@138--->public JSONPropertyObject(String key, String parentKey, JSONObject object) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@139--->super(key, parentKey);
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@186--->} else if(getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1356--->if (b) {
org.codehaus.jettison.json.JSONArray:write: LineNo@889--->int     len = length();
org.codehaus.jettison.json.JSONArray:length: LineNo@359--->return this.myArrayList.size();
org.codehaus.jettison.json.JSONObject:write: LineNo@1375--->((JSONArray)v).write(writer);
org.codehaus.jettison.json.JSONObject:write: LineNo@1364--->mayBeDropSimpleElement = hashMapSize > 1
org.codehaus.jettison.json.JSONObject:write: LineNo@1348--->if (!dropObjectKeyName) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeJSONObject: LineNo@296--->if (root == null) writer.write('null');
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@191--->values.put(value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:getPropertyArrayKey: LineNo@214--->return isArrayKeysWithSlashAvailable()  ? property.getTreeKey() : property.getKey();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@186--->} else if(getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@189--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.json.JSONObject:doPut: LineNo@958--->if (threshold > 0 && myHashMap.size() >= threshold) {
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@149--->out.writeEndDocument();
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@147--->out.writeEndElement();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@202--->return this;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:getValue: LineNo@143--->return object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
com.thoughtworks.xstream.io.xml.StaxWriter:<init>: LineNo@75--->if (writeEnclosingDocument) {
com.thoughtworks.xstream.io.xml.StaxWriter:<init>: LineNo@72--->this.out = out;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.json.JSONObject:<init>: LineNo@162--->this(false, null, true, true);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@210--->this.namespaceContext = convention;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@129--->return new JSONPropertyObject(getKey(), getParentKey(), jo);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@274--->if (stack.isEmpty()) throw new XMLStreamException('Too many closing tags.');
com.thoughtworks.xstream.io.xml.StaxWriter:endNode: LineNo@147--->out.writeEndElement();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@139--->super(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@138--->public JSONPropertyObject(String key, String parentKey, JSONObject object) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1379--->if (!mayBeDropSimpleElement) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1342--->boolean dropObjectKeyName = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1340--->int hashMapSize = this.myHashMap.size();
org.codehaus.jettison.json.JSONObject:write: LineNo@1366--->if (!mayBeDropSimpleElement) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@189--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.json.JSONArray:write: LineNo@897--->Object v = this.myArrayList.get(i);
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createWriter: LineNo@145--->return new JettisonStaxWriter(new QNameMap(), mof.createXMLStreamWriter(writer), getNameCoder(), convention);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@189--->if (!convention.isIgnoreEmptyArrayValues()
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:write: LineNo@1382--->}
org.codehaus.jettison.json.JSONObject:write: LineNo@1354--->Iterator keys = keys();
org.codehaus.jettison.json.JSONObject:write: LineNo@1344--->dropObjectKeyName = dropRootElement
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedNamespaceConvention:isEscapeForwardSlashAlways: LineNo@332--->return escapeForwardSlashAlways;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:write: LineNo@1355--->while (keys.hasNext()) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1352--->boolean  b = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1374--->} else if (v instanceof JSONArray) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartElement: LineNo@249--->current = new JSONPropertyString(key, parentKey);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.AbstractXMLStreamWriter:getSerializedAsArrays: LineNo@93--->return serializedAsArrays;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@187--->JSONArray values = new JSONArray();
org.codehaus.jettison.json.JSONObject:write: LineNo@1359--->String k = keys.next().toString();
org.codehaus.jettison.json.JSONArray:write: LineNo@889--->int     len = length();
org.codehaus.jettison.json.JSONArray:write: LineNo@891--->writer.write('[');
org.codehaus.jettison.json.JSONArray:write: LineNo@888--->boolean b = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1365--->&& ignoredElements != null && ignoredElements.contains(k);
org.codehaus.jettison.json.JSONObject:write: LineNo@1375--->((JSONArray)v).write(writer);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.json.JSONObject:write: LineNo@1349--->writer.write('{');
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeJSONObject: LineNo@297--->else root.write(writer);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@193--->object.put(property.getKey(), values);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@191--->values.put(value);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@187--->JSONArray values = new JSONArray();
org.codehaus.jettison.json.JSONObject:doPut: LineNo@977--->return this;
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndDocument: LineNo@279--->if (!stack.isEmpty()) throw new XMLStreamException('Missing some closing tags.');
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@274--->if (stack.isEmpty()) throw new XMLStreamException('Too many closing tags.');
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@171--->Object old = object.opt(property.getKey());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@171--->Object old = object.opt(property.getKey());
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@54--->this.key = key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@167--->Object value = property.getValue();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
com.thoughtworks.xstream.io.xml.StaxWriter:<init>: LineNo@76--->out.writeStartDocument();
org.codehaus.jettison.mapped.MappedNamespaceConvention:isEscapeForwardSlashAlways: LineNo@332--->return escapeForwardSlashAlways;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:withProperty: LineNo@74--->return withProperty(property, true);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@274--->if (stack.isEmpty()) throw new XMLStreamException('Too many closing tags.');
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:<init>: LineNo@53--->public JSONProperty(String key, String parentKey) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@41--->private Stack<JSONProperty> stack = new Stack<JSONProperty>();
org.codehaus.jettison.json.JSONObject:write: LineNo@1380--->b = true;
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.json.JSONObject:write: LineNo@1354--->Iterator keys = keys();
org.codehaus.jettison.json.JSONObject:write: LineNo@1343--->if (hashMapSize == 1) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1367--->writer.write(quote(k, escapeForwardSlashAlways));
org.codehaus.jettison.mapped.MappedNamespaceConvention:isIgnoreEmptyArrayValues: LineNo@327--->return ignoreEmptyArrayValues;
org.codehaus.jettison.json.JSONArray:write: LineNo@891--->writer.write('[');
org.codehaus.jettison.json.JSONArray:write: LineNo@899--->((JSONObject)v).write(writer);
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createWriter: LineNo@145--->return new JettisonStaxWriter(new QNameMap(), mof.createXMLStreamWriter(writer), getNameCoder(), convention);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:access$000: LineNo@30--->public class MappedXMLStreamWriter extends AbstractXMLStreamWriter {
org.codehaus.jettison.json.JSONObject:write: LineNo@1355--->while (keys.hasNext()) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1345--->|| ignoredElements != null && ignoredElements.contains(keys().next());
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@99--->convention.isEscapeForwardSlashAlways());
org.codehaus.jettison.json.JSONObject:write: LineNo@1356--->if (b) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1375--->((JSONArray)v).write(writer);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@115--->if (getSerializedAsArrays().contains(getPropertyArrayKey(property))) {
org.codehaus.jettison.json.JSONArray:<init>: LineNo@89--->this.myArrayList = new ArrayList();
org.codehaus.jettison.json.JSONObject:write: LineNo@1360--->Object v = this.myHashMap.get(k);
org.codehaus.jettison.json.JSONArray:write: LineNo@893--->for (int i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONArray:write: LineNo@894--->if (b) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1379--->if (!mayBeDropSimpleElement) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@171--->this.myHashMap = new LinkedHashMap();
org.codehaus.jettison.json.JSONObject:write: LineNo@1352--->boolean  b = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1342--->boolean dropObjectKeyName = false;
org.codehaus.jettison.json.JSONObject:write: LineNo@1340--->int hashMapSize = this.myHashMap.size();
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@193--->object.put(property.getKey(), values);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.json.JSONArray:put: LineNo@634--->return this;
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndDocument: LineNo@281--->writeJSONObject((JSONObject)current.getValue());
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.json.JSONObject:opt: LineNo@638--->return key == null ? null : this.myHashMap.get(key);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:<init>: LineNo@140--->this.object = object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONProperty:getKey: LineNo@59--->return key;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@168--->if(value instanceof String && !((String)value).isEmpty()) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeStartDocument: LineNo@241--->convention.isEscapeForwardSlashAlways()));
org.codehaus.jettison.mapped.MappedXMLStreamWriter:writeEndElement: LineNo@275--->current = stack.pop().withProperty(current);
org.codehaus.jettison.json.JSONObject:write: LineNo@1382--->}
org.codehaus.jettison.json.JSONObject:write: LineNo@1354--->Iterator keys = keys();
org.codehaus.jettison.json.JSONObject:write: LineNo@1344--->dropObjectKeyName = dropRootElement
org.codehaus.jettison.json.JSONArray:write: LineNo@893--->for (int i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONArray:write: LineNo@889--->int     len = length();
org.codehaus.jettison.json.JSONArray:write: LineNo@905--->b = true;
org.codehaus.jettison.mapped.MappedXMLOutputFactory:createXMLStreamWriter: LineNo@40--->return new MappedXMLStreamWriter(convention, writer);
com.thoughtworks.xstream.XStream:toXML: LineNo@1268--->Writer writer = new StringWriter();
org.codehaus.jettison.json.JSONObject:write: LineNo@1383--->if (!dropObjectKeyName) {
org.codehaus.jettison.json.JSONObject:<init>: LineNo@171--->this.myHashMap = new LinkedHashMap();
org.codehaus.jettison.json.JSONObject:write: LineNo@1359--->String k = keys.next().toString();
org.codehaus.jettison.json.JSONArray:write: LineNo@888--->boolean b = false;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyString:withProperty: LineNo@116--->JSONArray values = new JSONArray();
org.codehaus.jettison.json.JSONArray:write: LineNo@897--->Object v = this.myArrayList.get(i);
org.codehaus.jettison.json.JSONObject:write: LineNo@1380--->b = true;
org.codehaus.jettison.json.JSONObject:keys: LineNo@575--->return this.myHashMap.keySet().iterator();
org.codehaus.jettison.json.JSONObject:write: LineNo@1354--->Iterator keys = keys();
org.codehaus.jettison.json.JSONObject:write: LineNo@1343--->if (hashMapSize == 1) {
org.codehaus.jettison.json.JSONObject:put: LineNo@943--->return doPut(key, value, -1, false);
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:getValue: LineNo@143--->return object;
org.codehaus.jettison.mapped.MappedXMLStreamWriter$JSONPropertyObject:withProperty: LineNo@171--->Object old = object.opt(property.getKey());
org.codehaus.jettison.json.JSONObject:write: LineNo@1355--->while (keys.hasNext()) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1345--->|| ignoredElements != null && ignoredElements.contains(keys().next());
org.codehaus.jettison.json.JSONArray:write: LineNo@893--->for (int i = 0; i < len; i += 1) {
org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init>: LineNo@209--->this.writer = writer;
org.codehaus.jettison.json.JSONObject:write: LineNo@1384--->writer.write('}');
org.codehaus.jettison.json.JSONObject:write: LineNo@1360--->Object v = this.myHashMap.get(k);
org.codehaus.jettison.json.JSONArray:write: LineNo@889--->int     len = length();
org.codehaus.jettison.json.JSONArray:<init>: LineNo@89--->this.myArrayList = new ArrayList();
org.codehaus.jettison.json.JSONArray:write: LineNo@899--->((JSONObject)v).write(writer);
org.codehaus.jettison.json.JSONObject:write: LineNo@1382--->}
org.codehaus.jettison.json.JSONObject:write: LineNo@1354--->Iterator keys = keys();
org.codehaus.jettison.json.JSONObject:write: LineNo@1344--->dropObjectKeyName = dropRootElement
org.codehaus.jettison.json.JSONObject:write: LineNo@1383--->if (!dropObjectKeyName) {
org.codehaus.jettison.json.JSONArray:write: LineNo@907--->writer.write(']');
org.codehaus.jettison.json.JSONObject:write: LineNo@1386--->return writer;
org.codehaus.jettison.json.JSONArray:length: LineNo@359--->return this.myArrayList.size();
org.codehaus.jettison.json.JSONArray:write: LineNo@905--->b = true;
org.codehaus.jettison.json.JSONObject:write: LineNo@1355--->while (keys.hasNext()) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1345--->|| ignoredElements != null && ignoredElements.contains(keys().next());
org.codehaus.jettison.json.JSONObject:write: LineNo@1384--->writer.write('}');
org.codehaus.jettison.json.JSONArray:write: LineNo@908--->return writer;
org.codehaus.jettison.json.JSONArray:write: LineNo@893--->for (int i = 0; i < len; i += 1) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1383--->if (!dropObjectKeyName) {
org.codehaus.jettison.json.JSONObject:write: LineNo@1386--->return writer;
org.codehaus.jettison.json.JSONArray:write: LineNo@907--->writer.write(']');
org.codehaus.jettison.json.JSONObject:write: LineNo@1384--->writer.write('}');
org.codehaus.jettison.json.JSONArray:write: LineNo@908--->return writer;
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject: LineNo@175--->ArrayList list2 = (ArrayList)xstream.fromXML(json);
org.codehaus.jettison.json.JSONObject:write: LineNo@1386--->return writer;
com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject: LineNo@176--->assertEquals(json, xstream.toXML(list2));
com.thoughtworks.xstream.XStream:toXML: LineNo@1270--->return writer.toString();
