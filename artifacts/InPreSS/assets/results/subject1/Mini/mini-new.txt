Line 71 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:tearDown ---> }
Line 70 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:tearDown ---> super.tearDown();
Line 69 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:tearDown ---> TimeZoneChanger.reset();
Line 176 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals(json, xstream.toXML(list2));
Func507();
map=Func526();
<com.thoughtworks.xstream.core.util.Primitives: java.lang.Class class$java$lang$Integer>=Func52(this, nameCoder, out);
Func53(this, nameCoder, out);
Func548(stack9, stack10, stack13, stack12);
com.thoughtworks.xstream.io.AbstractDriver#getNameCoder()Lcom/thoughtworks/xstream/io/naming/NameCoder;=Func549();
org.codehaus.jettison.mapped.MappedXMLOutputFactory#createXMLStreamWriter(Ljava/io/Writer;)Ljavax/xml/stream/XMLStreamWriter;=Func551(stack2, convention, writer, this);
Line 39 org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init> ---> private String valueKey = MIXED_CONTENT_VALUE_KEY;
Line 25 org.codehaus.jettison.AbstractXMLStreamWriter:<init> ---> private ArrayList<String> serializedAsArrays = new ArrayList<String>();
Func556(this);
Func557(writer);
Func558(writer);
defaultNamespace=Func559();
defaultPrefix=Func560();
Func561(this);
Func562();
writer=Func564();
Line 176 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals(json, xstream.toXML(list2));
Line 175 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> ArrayList list2 = (ArrayList)xstream.fromXML(json);
Func570();
$stack6=Func104(type, this.unreferenceableTypes);
Line 54 com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert ---> final boolean isReferenceable = getMapper().isReferenceable(type);
Line 157 com.thoughtworks.xstream.mapper.MapperWrapper:aliasForSystemAttribute ---> return aliasForSystemAttributeMapper.aliasForSystemAttribute(attribute);
Line 149 com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute ---> return aliasForAttributeMapper.aliasForAttribute(attribute);
com.thoughtworks.xstream.XStream$1#lookupConverterForType(Ljava/lang/Class;)Lcom/thoughtworks/xstream/converters/Converter;=Func109(stack40);
cachedConverter=Func621(this.typeToConverterMap, type);
$stack4=Func120(type);
Func122(type, this.defaultImplementationOfMapper);
Line 54 com.thoughtworks.xstream.core.TreeUnmarshaller:convertAnother ---> type = mapper.defaultImplementationOf(type);
com.thoughtworks.xstream.core.util.HierarchicalStreams#readClassType(Lcom/thoughtworks/xstream/io/HierarchicalStreamReader;Lcom/thoughtworks/xstream/mapper/Mapper;)Ljava/lang/Class;=Func125(type);
com.thoughtworks.xstream.mapper.CachingMapper#realClass(Ljava/lang/String;)Ljava/lang/Class;=Func623(cached);
cached=Func159(this.realClassCache, elementName);
com.thoughtworks.xstream.io.ReaderWrapper#getNodeName()Ljava/lang/String;=Func161(this.stack, this.pointer, this););
org.codehaus.jettison.AbstractXMLStreamReader#getAttributeValue(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;=Func172(this.attributes);
Line 41 com.thoughtworks.xstream.core.util.HierarchicalStreams:readClassAttribute ---> if (attributeName != null) {
Line 131 com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readBareItem ---> Class type = HierarchicalStreams.readClassType(reader, mapper());
Line 117 com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:readItem ---> return readBareItem(reader, context, current);
pointer=Func624(value);
com.thoughtworks.xstream.io.xml.StaxReader#pullElementName()Ljava/lang/String;=Func175();
Line 41 com.thoughtworks.xstream.io.xml.QNameMap:getJavaClassName ---> if (qnameToJava != null) {
Line 122 com.thoughtworks.xstream.io.xml.AbstractPullReader:move ---> elementStack.push(pullElementName());
node=Func625(stack25);
keys=Func627(this.myHashMap);
Line 54 org.codehaus.jettison.Node:<init> ---> this.attributes = new LinkedHashMap();
result=Func631();
Func632();
Line 262 org.codehaus.jettison.mapped.MappedXMLStreamReader:isAvoidArraySpecificEvents ---> return keys != null && keys.contains(key);
Line 311 org.codehaus.jettison.mapped.MappedNamespaceConvention:getPrimitiveArrayKeys ---> return primitiveArrayKeys;
array=Func652(newObj);
org.codehaus.jettison.json.JSONObject#get(Ljava/lang/String;)Ljava/lang/Object;=Func193(o);
nextKey=Func198(this.keys);
Line 86 org.codehaus.jettison.mapped.MappedXMLStreamReader:next ---> processElement();
$stack5=Func200(this.keys);
Line 79 com.thoughtworks.xstream.converters.collections.CollectionConverter:unmarshal ---> Collection collection = (Collection) createCollection(context.getRequiredType());
Line 55 com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller:convert ---> if (reference != null) {
Line 48 com.thoughtworks.xstream.mapper.CachingMapper:realClass ---> realClassCache.put(elementName, result);
Line 72 com.thoughtworks.xstream.mapper.SecurityMapper:realClass ---> for (int i = 0; i < permissions.size(); ++i) {
Line 32 com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy:unmarshal ---> return context.start(dataHolder);
converterLookup=Func653();
in=Func207(in);
Line 35 com.thoughtworks.xstream.io.xml.AbstractPullReader:<init> ---> private final FastStack elementStack = new FastStack(16);
stack=Func654();
nameCoder=Func655();
org.codehaus.jettison.AbstractXMLInputFactory#createXMLStreamReader(Ljava/io/Reader;)Ljavax/xml/stream/XMLStreamReader;=Func208(stack5);
event=Func656();
Line 53 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> this.node = new Node(null, rootName, obj, convention);
name=Func657(name);
keys=Func669(this.myHashMap);
Line 54 org.codehaus.jettison.Node:<init> ---> this.attributes = new LinkedHashMap();
object=Func673(object);
parent=Func674();
Func675(this);
Line 52 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> } else if (top instanceof JSONArray && !(((JSONArray)top).length() == 1 && ((JSONArray)top).get(0).equals(''))) {
org.codehaus.jettison.json.JSONObject#opt(Ljava/lang/String;)Ljava/lang/Object;=Func232(key, this.myHashMap);
ctx=Func235();
convention=Func236();
rootName=Func237(this.myHashMap);
Func239(obj);
this.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types>=Func240(root);
Line 59 org.codehaus.jettison.mapped.MappedXMLInputFactory:createJSONObject ---> return new JSONObject(tokener);
Line 64 org.codehaus.jettison.json.JSONTokener:getThreshold ---> return threshold;
Line 232 org.codehaus.jettison.json.JSONObject:<init> ---> doPut(key, x.nextValue(), x.getThreshold(), true);
myIndex=Func676(this.myIndex);
myHashMap=Func723();
Line 162 org.codehaus.jettison.json.JSONObject:<init> ---> this(false, null, true, true);
Line 412 org.codehaus.jettison.json.JSONTokener:newJSONObject ---> return new JSONObject(this);
myIndex=Func725(this.myIndex);
myArrayList=Func753();
Line 416 org.codehaus.jettison.json.JSONTokener:newJSONArray ---> return new JSONArray(this);
myIndex=Func755();
Line 175 org.codehaus.jettison.json.JSONObject:<init> ---> this.escapeForwardSlashAlways = escapeForwardSlash;
Line 174 org.codehaus.jettison.json.JSONObject:<init> ---> this.writeNullAsString = writeNullAsString;
Line 173 org.codehaus.jettison.json.JSONObject:<init> ---> this.ignoredElements = ignoredElements;
Line 172 org.codehaus.jettison.json.JSONObject:<init> ---> this.dropRootElement = dropRootElement;
myHashMap=Func816();
Line 145 org.codehaus.jettison.json.JSONObject:<init> ---> private boolean escapeForwardSlashAlways = true;
Line 144 org.codehaus.jettison.json.JSONObject:<init> ---> private boolean writeNullAsString = true;
Line 170 org.codehaus.jettison.json.JSONObject:<init> ---> boolean escapeForwardSlash) {
Line 162 org.codehaus.jettison.json.JSONObject:<init> ---> this(false, null, true, true);
$stack2=Func817(this);
Line 59 org.codehaus.jettison.mapped.MappedXMLInputFactory:createJSONObject ---> return new JSONObject(tokener);
Line 44 org.codehaus.jettison.mapped.MappedXMLInputFactory:createXMLStreamReader ---> JSONObject root = createJSONObject(tokener);
Line 48 org.codehaus.jettison.json.JSONTokener:<init> ---> this.mySource = s.trim();
Line 39 org.codehaus.jettison.json.JSONTokener:<init> ---> private int threshold = -1;
org.codehaus.jettison.AbstractXMLInputFactory#readAll(Ljava/io/Reader;)Ljava/lang/String;=Func481(buf, stack7, stack6);
count=Func484(buf);
Line 175 org.codehaus.jettison.AbstractXMLInputFactory:readAll ---> char[] buf = new char[bufSize];
Line 175 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> ArrayList list2 = (ArrayList)xstream.fromXML(json);
Line 172 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals((JVM.is15()
Line 174 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> : '{'list':{'string':['one']}}').replace('\'', '''), json);
Line 172 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals((JVM.is15()
Line 172 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals((JVM.is15()
Func486(type, converter, stack33, this.typeToConverterMap, stack34);
Line 65 com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType ---> Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
Func487(type);
Line 48 com.thoughtworks.xstream.core.TreeMarshaller:convertAnother ---> converter = converterLookup.lookupConverterForType(item.getClass());
com.thoughtworks.xstream.mapper.LambdaMapper#serializedClass(Ljava/lang/Class;)Ljava/lang/String;=Func490();
Line 77 com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType ---> typeToConverterMap.put(type.getName(), converter);
Line 65 com.thoughtworks.xstream.core.DefaultConverterLookup:lookupConverterForType ---> Converter cachedConverter = type != null ? (Converter)typeToConverterMap.get(type.getName()) : null;
Line 517 com.thoughtworks.xstream.XStream$1:lookupConverterForType ---> return defaultConverterLookup.lookupConverterForType(type);
Line 48 com.thoughtworks.xstream.core.TreeMarshaller:convertAnother ---> converter = converterLookup.lookupConverterForType(item.getClass());
Line 171 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> String json = xstream.toXML(list1);
Line 170 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> list1.add('one');
Line 169 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> ArrayList list1 = new ArrayList();
Line 102 com.thoughtworks.xstream.core.DefaultConverterLookup:registerConverter ---> typeToConverterMap.clear();
serializedClassMapper=Func494();
isReferenceableMapper=Func818();
defaultImplementationOfMapper=Func819();
serializedClassMapper=Func495();
defaultImplementationOfMapper=Func496();
serializedClassMapper=Func497();
converterLookup=Func498();
convention=Func499();
Line 158 org.codehaus.jettison.mapped.Configuration:getPrimitiveArrayKeys ---> return primitiveArrayKeys;
Line 70 org.codehaus.jettison.mapped.MappedNamespaceConvention:<init> ---> this.primitiveArrayKeys = config.getPrimitiveArrayKeys();
Line 43 org.codehaus.jettison.mapped.MappedNamespaceConvention:<init> ---> private Map<Object, Object> jnsToXns = new HashMap<Object, Object>();
Line 38 org.codehaus.jettison.AbstractXMLInputFactory:<init> ---> private int bufSize = INPUT_BUF_SIZE;
Line 78 org.codehaus.jettison.mapped.Configuration:<init> ---> private Set primitiveArrayKeys = Collections.EMPTY_SET;
Line 60 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:setUp ---> xstream = new XStream(new JettisonMappedXmlDriver());
Line 59 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:setUp ---> TimeZoneChanger.change('UTC');
Line 58 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:setUp ---> super.setUp();
