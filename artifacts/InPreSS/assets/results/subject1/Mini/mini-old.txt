Line 71 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:tearDown ---> }
Line 70 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:tearDown ---> super.tearDown();
Line 69 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:tearDown ---> TimeZoneChanger.reset();
Line 176 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals(json, xstream.toXML(list2));
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper#hashCode()I=Func0(obj);
Func9();
$stack3=Func21(stack3, stack4);
map=Func30();
Func52(out, nameCoder, this);
Func53(out, nameCoder, this);
$stack14=Func54(stack12, stack9, stack13, stack10);
com.thoughtworks.xstream.io.AbstractDriver#getNameCoder()Lcom/thoughtworks/xstream/io/naming/NameCoder;=Func55();
org.codehaus.jettison.mapped.MappedXMLOutputFactory#createXMLStreamWriter(Ljava/io/Writer;)Ljavax/xml/stream/XMLStreamWriter;=Func57(stack2, this, convention, writer);
Line 38 org.codehaus.jettison.mapped.MappedXMLStreamWriter:<init> ---> private String valueKey = '$';
Line 25 org.codehaus.jettison.AbstractXMLStreamWriter:<init> ---> ArrayList serializedAsArrays = new ArrayList();
Func62(this);
$stack2=Func63(writer);
$stack11=Funcnull(stack11, writer);
defaultNamespace=Func64();
defaultPrefix=Func65();
Func66(this);
$stack9=Func67();
writer=Func69(stack3);
Line 176 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> assertEquals(json, xstream.toXML(list2));
Line 175 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> ArrayList list2 = (ArrayList)xstream.fromXML(json);
i=Func83(stack3, stack4, i);
org.codehaus.jettison.Node#getKeys()Ljava/util/Iterator;=Func84(stack6, stack7, stack5, stack8);
$stack1=Func90(stack1);
idx=Func93();
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller#convert(Ljava/lang/Object;Ljava/lang/Class;Lcom/thoughtworks/xstream/converters/Converter;)Ljava/lang/Object;=Func99();
$stack2=Func104(stack40, converter, stack3, this, type#3, parent);
com.thoughtworks.xstream.io.xml.AbstractPullReader#readEvent()Lcom/thoughtworks/xstream/io/xml/AbstractPullReader$Event;=Func106(stack3);
Line 90 com.thoughtworks.xstream.mapper.DefaultMapper:aliasForAttribute ---> return attribute;
Line 31 com.thoughtworks.xstream.mapper.AttributeAliasingMapper:aliasForAttribute ---> return alias == null ? super.aliasForAttribute(attribute) : alias;
Line 98 com.thoughtworks.xstream.mapper.DefaultMapper:aliasForSystemAttribute ---> return attribute;
Line 29 com.thoughtworks.xstream.mapper.SystemAttributeAliasingMapper:aliasForSystemAttribute ---> alias = super.aliasForSystemAttribute(attribute);
com.thoughtworks.xstream.XStream$1#lookupConverterForType(Ljava/lang/Class;)Lcom/thoughtworks/xstream/converters/Converter;=Func109(stack40);
cachedConverter=Func112(this.typeToConverterMap);
Line 151 com.thoughtworks.xstream.io.xml.AbstractPullReader:readRealEvent ---> } else if (event.type == START_NODE) {
Func117(type);
$stack2=Func120(this.typeToImpl, type);
Line 136 com.thoughtworks.xstream.mapper.AnnotationMapper:defaultImplementationOf ---> final Class defaultImplementation = super.defaultImplementationOf(type);
$stack2=Func122(this.classLoaders);
com.thoughtworks.xstream.core.util.HierarchicalStreams#readClassType(Lcom/thoughtworks/xstream/io/HierarchicalStreamReader;Lcom/thoughtworks/xstream/mapper/Mapper;)Ljava/lang/Class;=Func125();
org.codehaus.jettison.mapped.MappedNamespaceConvention#createQName(Ljava/lang/String;Lorg/codehaus/jettison/Node;)Ljavax/xml/namespace/QName;=Func129();
cached=Func159(this.attributes);
com.thoughtworks.xstream.io.ReaderWrapper#getNodeName()Ljava/lang/String;=Func161();
Line 340 org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceSeparator ---> return jsonNamespaceSeparator == null ? DOT_NAMESPACE_SEP : jsonNamespaceSeparator;
Func171(stack5);
com.thoughtworks.xstream.io.xml.StaxReader#pullElementName()Ljava/lang/String;=Func175(this.lookahead, stack1);
Line 149 com.thoughtworks.xstream.mapper.MapperWrapper:aliasForAttribute ---> return aliasForAttributeMapper.aliasForAttribute(attribute);
node=Func177(this, stack34);
attributes=Func178();
i=Func191(stack35, stack34, nextKey);
org.codehaus.jettison.json.JSONObject#get(Ljava/lang/String;)Ljava/lang/Object;=Func193(o);
org.codehaus.jettison.json.JSONObject#opt(Ljava/lang/String;)Ljava/lang/Object;=Func194(this.myHashMap, key);
nextKey=Func198(this.keys);
Line 129 org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement ---> nextKey = (String) node.getKeys().next();
Line 102 org.codehaus.jettison.mapped.MappedXMLStreamReader:processElement ---> if (node.getArray() != null) {
$stack33=Func200(this.keys);
Line 76 org.codehaus.jettison.mapped.MappedXMLStreamReader:next ---> } else if ((node.getKeys() != null && node.getKeys().hasNext()) || node.getArray() != null) {
Line 74 org.codehaus.jettison.mapped.MappedXMLStreamReader:next ---> if (currentValue != null) {
permission=Func204(stack5);
Line 103 com.thoughtworks.xstream.converters.collections.CollectionConverter:createCollection ---> return super.createCollection(this.type != null ? this.type : type);
Line 72 com.thoughtworks.xstream.core.TreeUnmarshaller:convert ---> return converter.unmarshal(reader, this);
Line 125 com.thoughtworks.xstream.mapper.MapperWrapper:realClass ---> return realClassMapper.realClass(elementName);
Line 119 com.thoughtworks.xstream.io.xml.AbstractPullReader:move ---> pool.push(event);
Line 240 org.codehaus.jettison.mapped.MappedNamespaceConvention:createQName ---> if ( xns == null ) {
Line 176 org.codehaus.jettison.mapped.MappedNamespaceConvention:getNamespaceURI ---> return (String) jnsToXns.get( prefix );
converterLookup=Func653();
Line 119 org.codehaus.jettison.json.JSONTokener:next ---> return c;
myIndex=Func207(in);
stack=Func654();
nameCoder=Func655();
Line 85 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createReader ---> return new StaxReader(new QNameMap(), mif.createXMLStreamReader(reader), getNameCoder());
org.codehaus.jettison.AbstractXMLInputFactory#createXMLStreamReader(Ljava/io/Reader;)Ljavax/xml/stream/XMLStreamReader;=Func208(stack4, this);
event=Func210();
Line 51 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> this.node = new Node(null, rootName, ((JSONArray)top).getJSONObject(0), convention);
name=Func211(name);
keys=Func223(this.myHashMap);
Line 53 org.codehaus.jettison.Node:<init> ---> this.attributes = new HashMap();
object=Func227(object);
parent=Func228();
Func229(this);
Line 51 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> this.node = new Node(null, rootName, ((JSONArray)top).getJSONObject(0), convention);
org.codehaus.jettison.json.JSONArray#getJSONObject(I)Lorg/codehaus/jettison/json/JSONObject;=Func230();
Line 51 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> this.node = new Node(null, rootName, ((JSONArray)top).getJSONObject(0), convention);
Line 50 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> } else if (top instanceof JSONArray && !(((JSONArray)top).length() == 1 && ((JSONArray)top).get(0).equals(''))) {
org.codehaus.jettison.json.JSONArray#length()I=Func231(stack7, this.myIndex, stack6);
Line 260 org.codehaus.jettison.json.JSONTokener:nextString ---> sb.append(c);
org.codehaus.jettison.json.JSONObject#opt(Ljava/lang/String;)Ljava/lang/Object;=Func232(key, this.myHashMap);
ctx=Func235();
Line 45 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> this.nodes = new FastStack();
convention=Func236();
rootName=Func237(this.myHashMap);
Line 119 org.codehaus.jettison.json.JSONTokener:next ---> return c;
Line 32 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> private String valueKey = '$';
Line 25 org.codehaus.jettison.AbstractXMLStreamReader:<init> ---> public abstract class AbstractXMLStreamReader implements XMLStreamReader {
Line 41 org.codehaus.jettison.mapped.MappedXMLStreamReader:<init> ---> throws JSONException, XMLStreamException {
$stack4=Func240(this.convention, stack3);
org.codehaus.jettison.json.JSONTokener#more()Z=Func241();
org.codehaus.jettison.json.JSONTokener#next()C=Func242(stack8);
myIndex=Func243(this.myIndex, stack7, stack6, this.mySource);
$stack2=Func248(this.myIndex, stack7, stack6, stack4, stack2, stack3, stack1, this.mySource);
$stack2=Func249();
Func252(c);
$stack4=Func254(stack3, stack4, this.myIndex, stack7, stack6, this.mySource);
escapeForwardSlashAlways=Func255(this.myIndex, stack7, stack6, this.mySource);
Func259(this.myIndex, stack7, stack6, this.mySource);
myIndex=Func266(stack2);
$stack2=Func267(stack3, stack4, stack1, stack2, stack7, stack6, this.myIndex, this.mySource);
org.codehaus.jettison.json.JSONTokener#more()Z=Func276(this);
Line 203 org.codehaus.jettison.json.JSONTokener:nextString ---> StringBuffer sb = new StringBuffer();
myIndex=Func287(this.mySource, this.myIndex);
myIndex=Func289(stack7, stack6, this.myIndex);
$stack10=Func295(x);
Func296();
org.codehaus.jettison.json.JSONTokener#next()C=Func297();
myIndex=Func300(stack7, stack6, this.myIndex);
myArrayList=Func302(this.myIndex, this.mySource);
myIndex=Func307(stack7, stack6, this.myIndex);
myIndex=Func312(this.mySource, this.myIndex, stack4, c);
myIndex=Func315(stack7, stack6, this.myIndex);
org.codehaus.jettison.json.JSONTokener#nextClean()C=Func320(this.mySource, this.myIndex, stack4, c);
Func321(quote, this.mySource, this.myIndex);
myIndex=Func323(this.myIndex, stack6, stack7);
key=Func330(this.myIndex, this.mySource);
myIndex=Func332(this.myIndex, stack6, stack7);
Func339(c);
$stack6=Func340(this.myIndex, stack6, stack7);
$stack4=Func341(stack4, this.myIndex, stack3, this.mySource);
myIndex=Func348(this.myIndex, stack7, stack6);
Line 203 org.codehaus.jettison.json.JSONTokener:nextString ---> StringBuffer sb = new StringBuffer();
org.codehaus.jettison.json.JSONTokener#nextClean()C=Func363(this.myIndex, this.mySource);
myIndex=Func365(this.myIndex);
myIndex=Func372(this.myIndex);
myHashMap=Func384();
Line 310 org.codehaus.jettison.json.JSONTokener:nextValue ---> return new JSONObject(this);
myIndex=Func386(this.myIndex);
myIndex=Func415();
myHashMap=Func477();
Func478(this);
Func479(this);
Line 43 org.codehaus.jettison.mapped.MappedXMLInputFactory:createXMLStreamReader ---> JSONObject root = new JSONObject(tokener);
Line 46 org.codehaus.jettison.json.JSONTokener:<init> ---> this.mySource = s;
Line 44 org.codehaus.jettison.json.JSONTokener:<init> ---> public JSONTokener(String s) {
Line 151 org.codehaus.jettison.AbstractXMLInputFactory:createXMLStreamReader ---> return createXMLStreamReader(new JSONTokener(readAll(reader)));
org.codehaus.jettison.AbstractXMLInputFactory#readAll(Ljava/io/Reader;)Ljava/lang/String;=Func481(r, stack5, buf, len, stack6);
Line 169 org.codehaus.jettison.AbstractXMLInputFactory:readAll ---> len += count;
Line 166 org.codehaus.jettison.AbstractXMLInputFactory:readAll ---> if (count < 0) { // Got it all
count=Func484(r, buf, len);
Line 162 org.codehaus.jettison.AbstractXMLInputFactory:readAll ---> int len = 0;
Line 161 org.codehaus.jettison.AbstractXMLInputFactory:readAll ---> char[] buf = new char[INPUT_BUF_SIZE];
Line 151 org.codehaus.jettison.AbstractXMLInputFactory:createXMLStreamReader ---> return createXMLStreamReader(new JSONTokener(readAll(reader)));
Line 85 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriver:createReader ---> return new StaxReader(new QNameMap(), mif.createXMLStreamReader(reader), getNameCoder());
Line 1329 com.thoughtworks.xstream.XStream:fromXML ---> return fromXML(new StringReader(xml));
Line 175 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> ArrayList list2 = (ArrayList)xstream.fromXML(json);
Line 174 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:testSingletonListWithSimpleObject ---> : '{'list':{'string':['one']}}').replace('\'', '''), json);

node=Func485();
$stack33=Func486(this.iterator);
Line 91 com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator:next ---> return ((PrioritizedItem)iterator.next()).value;
$stack2=Func487();
Line 45 com.thoughtworks.xstream.mapper.ArrayMapper:serializedClass ---> name = super.serializedClass(type);
com.thoughtworks.xstream.mapper.LambdaMapper#serializedClass(Ljava/lang/Class;)Ljava/lang/String;=Func490(type);
Line 125 com.thoughtworks.xstream.mapper.AnnotationMapper:serializedClass ---> if (!locked) {
Line 64 com.thoughtworks.xstream.converters.collections.AbstractCollectionConverter:writeItem ---> String name = mapper().serializedClass(item.getClass());
Line 58 com.thoughtworks.xstream.mapper.DefaultImplementationsMapper:addDefaultImplementation ---> typeToImpl.put(ofType, defaultImplementation);
serializedClassMapper=Func494();
isReferenceableMapper=Func818();
defaultImplementationOfMapper=Func819();
serializedClassMapper=Func495();
defaultImplementationOfMapper=Func496();
serializedClassMapper=Func497();
lastId=Func498();
Line 515 com.thoughtworks.xstream.XStream:<init> ---> this(reflectionProvider, driver, classLoader, mapper, new ConverterLookup() {
Line 81 org.codehaus.jettison.mapped.MappedNamespaceConvention:<init> ---> if (attributesAsElements != null) {
convention=Func499();
Line 37 org.codehaus.jettison.mapped.MappedNamespaceConvention:<init> ---> private Map jnsToXns = new HashMap();
Line 60 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:setUp ---> xstream = new XStream(new JettisonMappedXmlDriver());
Line 59 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:setUp ---> TimeZoneChanger.change('UTC');
Line 58 com.thoughtworks.xstream.io.json.JettisonMappedXmlDriverTest:setUp ---> super.setUp();
