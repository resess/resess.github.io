Line 57 com.squareup.moshi.MoshiTest:failOnUnknownThrowsOnUnknownFields ---> assertThat(expected).hasMessage('Cannot skip unexpected NAME at $.diameter');
Line 592 com.squareup.moshi.JsonUtf8Reader:skipName ---> throw new JsonDataException('Cannot skip unexpected ' + peeked + ' at ' + getPath());
Func183(this, message);
Line 592 com.squareup.moshi.JsonUtf8Reader:skipName ---> throw new JsonDataException('Cannot skip unexpected ' + peeked + ' at ' + getPath());
com.squareup.moshi.JsonReader#getPath()Ljava/lang/String;=Func184(this.stackSize);
Line 592 com.squareup.moshi.JsonUtf8Reader:skipName ---> throw new JsonDataException('Cannot skip unexpected ' + peeked + ' at ' + getPath());
com.squareup.moshi.JsonUtf8Reader#nextName()Ljava/lang/String;=Func193();
Line 591 com.squareup.moshi.JsonUtf8Reader:skipName ---> nextName(); // Move the path forward onto the offending name.
com.squareup.moshi.JsonUtf8Reader#peek()Lcom/squareup/moshi/JsonReader$Token;=Func194(com.squareup.moshi.JsonReader$Token.NAME);
Line 590 com.squareup.moshi.JsonUtf8Reader:skipName ---> Token peeked = peek();
Func223();
1463877470[1]=Func281();
Line 40 com.squareup.moshi.internal.NullSafeJsonAdapter:fromJson ---> return delegate.fromJson(reader);
Line 37 com.squareup.moshi.internal.NullSafeJsonAdapter:fromJson ---> if (reader.peek() == JsonReader.Token.NULL) {
com.squareup.moshi.JsonUtf8Reader#peek()Lcom/squareup/moshi/JsonReader$Token;=Func286();
NULL=Func287();
NAME=Func290();
peeked=Func297();
<com.squareup.moshi.JsonReader$Token: com.squareup.moshi.JsonReader$Token NAME>=Func298(p);
c=Func300();
Line 37 com.squareup.moshi.internal.NullSafeJsonAdapter:fromJson ---> if (reader.peek() == JsonReader.Token.NULL) {
Line 29 com.squareup.moshi.internal.NullSafeJsonAdapter:<init> ---> this.delegate = delegate;
Line 136 com.squareup.moshi.JsonAdapter:nullSafe ---> return new NullSafeJsonAdapter<>(this);
fieldsArray=Func124();
classFactory=Func125();
Line 176 com.squareup.moshi.internal.Util:resolve ---> return resolve(context, contextRawType, toResolve, new LinkedHashSet<TypeVariable>());
com.squareup.moshi.internal.Util#resolve(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Collection;)Ljava/lang/reflect/Type;=Func315(toResolve);
Line 176 com.squareup.moshi.internal.Util:resolve ---> return resolve(context, contextRawType, toResolve, new LinkedHashSet<TypeVariable>());
fieldType=Func316(rawType, type);
Func317(platformType, rawType, l6, l7, l8, this);
adapter=Func322();
Line 176 com.squareup.moshi.internal.Util:resolve ---> return resolve(context, contextRawType, toResolve, new LinkedHashSet<TypeVariable>());
com.squareup.moshi.internal.Util#resolve(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;Ljava/util/Collection;)Ljava/lang/reflect/Type;=Func336(toResolve);
Line 176 com.squareup.moshi.internal.Util:resolve ---> return resolve(context, contextRawType, toResolve, new LinkedHashSet<TypeVariable>());
annotations=Func337(rawType, type);
Func338(platformType, field, this);
field=Func342(rawType);
Line 113 com.squareup.moshi.internal.Util:isPlatformType ---> return name.startsWith('android.')
name=Func343(rawType);
com.squareup.moshi.Types#getRawType(Ljava/lang/reflect/Type;)Ljava/lang/Class;=Func345(type);
Func347(type);
t=Func349();
Line 60 com.squareup.moshi.ClassJsonAdapter$1:create ---> if (Util.isPlatformType(rawType)) {
Line 113 com.squareup.moshi.internal.Util:isPlatformType ---> return name.startsWith('android.')
Line 60 com.squareup.moshi.ClassJsonAdapter$1:create ---> if (Util.isPlatformType(rawType)) {
Line 59 com.squareup.moshi.ClassJsonAdapter$1:create ---> if (!annotations.isEmpty()) return null;
com.squareup.moshi.Types#getRawType(Ljava/lang/reflect/Type;)Ljava/lang/Class;=Func175();
i#10=Func179(i#10);
i=Func351(i#10);
result=Func181();
