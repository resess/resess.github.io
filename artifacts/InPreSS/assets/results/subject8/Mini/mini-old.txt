Line 66 com.actiontech.dble.plan.visitor.TestMySQLItemVisitor:testGroupbyHaving ---> Assert.assertEquals(true, 'COUNT(*) > 1'.equals(item.getItemName()));
com.actiontech.dble.plan.common.item.Item#getItemName()Ljava/lang/String;=Func0(this.itemName);
Line 66 com.actiontech.dble.plan.visitor.TestMySQLItemVisitor:testGroupbyHaving ---> Assert.assertEquals(true, 'COUNT(*) > 1'.equals(item.getItemName()));
com.actiontech.dble.plan.visitor.MySQLItemVisitor#getItem()Lcom/actiontech/dble/plan/common/item/Item;=Func1(stack50);
itemName=Func2(stack50);
a=Func14(a);
$stack4=Func16(a);
Line 160 com.alibaba.druid.sql.ast.expr.SQLAggregateExpr:accept0 ---> acceptChild(visitor, this.keep);
Line 159 com.alibaba.druid.sql.ast.expr.SQLAggregateExpr:accept0 ---> acceptChild(visitor, this.arguments);
fv=Func72();
com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr#getLeft()Lcom/alibaba/druid/sql/ast/SQLExpr;=Func74(this.left);
Func83(this.right);
Line 163 com.alibaba.druid.sql.ast.expr.SQLAggregateExpr:accept0 ---> acceptChild(visitor, this.withinGroup);
INSTANCE=Func95();
systemVariables=Func96();
Func99();
value=Func100();
Line 159 com.alibaba.druid.sql.ast.expr.SQLAggregateExpr:accept0 ---> acceptChild(visitor, this.arguments);
Func116(this.left, this);
Line 64 com.actiontech.dble.plan.visitor.TestMySQLItemVisitor:testGroupbyHaving ---> q.accept(v);
com.alibaba.druid.sql.ast.statement.SQLSelectGroupByClause#getHaving()Lcom/alibaba/druid/sql/ast/SQLExpr;=Func120(this.having);
Line 62 com.actiontech.dble.plan.visitor.TestMySQLItemVisitor:testGroupbyHaving ---> SQLExpr q = groupBy.getHaving();
com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock#getGroupBy()Lcom/alibaba/druid/sql/ast/statement/SQLSelectGroupByClause;=Func121(this.groupBy);
Line 61 com.actiontech.dble.plan.visitor.TestMySQLItemVisitor:testGroupbyHaving ---> SQLSelectGroupByClause groupBy = query.getGroupBy();
Line 102 com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock:setGroupBy ---> this.groupBy = groupBy;
having=Func124();
right=Func126();
left=Func128();
Line 43 com.alibaba.druid.sql.ast.expr.SQLAggregateExpr:<init> ---> protected final List<SQLExpr> arguments        = new ArrayList<SQLExpr>();
Line 1124 com.alibaba.druid.sql.parser.SQLExprParser:methodRest ---> SQLAggregateExpr aggregateExpr = parseAggregateExpr(aggMethodName);
com.alibaba.druid.sql.parser.SQLExprParser#getAggreateFunction(J)Ljava/lang/String;=Func225();
token=Func234();
pos=Func235(this.pos, stack1, stack2);
index=Func261(this.pos);
$stack3=Func268();
ch=Func278(this.pos);
Line 547 com.alibaba.druid.sql.parser.SQLSelectParser:parseGroupBy ---> if (lexer.token == (Token.GROUP)) {
token=Func517(this.pos);
ch=Func524(this.pos);
pos=Func528(this.pos);
Line 799 com.alibaba.druid.sql.parser.SQLSelectParser:parseTableSourceQueryTableExpr ---> tableReference.setExpr(expr());
Line 793 com.alibaba.druid.sql.parser.SQLSelectParser:parseTableSourceQueryTableExpr ---> if (lexer.token == Token.LITERAL_ALIAS || lexer.token == Token.IDENTIFIED
token=Func629();
ch=Func633(this.pos);
ch=Func637();
hash_lower=Func640();
Line 88 com.alibaba.druid.sql.parser.SQLSelectParser:select ---> SQLSelectQuery query = query();
